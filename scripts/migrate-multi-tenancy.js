const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function migrateToMultiTenancy() {
  try {
    console.log('üöÄ Iniciando migra√ß√£o para multi-tenancy...')

    // 1. Criar uma empresa padr√£o para dados existentes
    console.log('üìù Criando empresa padr√£o...')
    const defaultCompany = await prisma.company.create({
      data: {
        name: 'Empresa Padr√£o',
        email: 'admin@default.com'
      }
    })
    console.log('‚úÖ Empresa padr√£o criada:', defaultCompany.id)

    // 2. Atualizar usu√°rios existentes
    console.log('üë• Atualizando usu√°rios existentes...')
    const users = await prisma.user.findMany()
    for (const user of users) {
      await prisma.user.update({
        where: { id: user.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${users.length} usu√°rios atualizados`)

    // 3. Atualizar produtos existentes
    console.log('üì¶ Atualizando produtos existentes...')
    const products = await prisma.product.findMany()
    for (const product of products) {
      await prisma.product.update({
        where: { id: product.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${products.length} produtos atualizados`)

    // 4. Atualizar acess√≥rios existentes
    console.log('üîß Atualizando acess√≥rios existentes...')
    const accessories = await prisma.accessory.findMany()
    for (const accessory of accessories) {
      await prisma.accessory.update({
        where: { id: accessory.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${accessories.length} acess√≥rios atualizados`)

    // 5. Atualizar equipamentos existentes
    console.log('‚ö° Atualizando equipamentos existentes...')
    const equipment = await prisma.equipment.findMany()
    for (const item of equipment) {
      await prisma.equipment.update({
        where: { id: item.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${equipment.length} equipamentos atualizados`)

    // 6. Atualizar clientes existentes
    console.log('üë§ Atualizando clientes existentes...')
    const clients = await prisma.client.findMany()
    for (const client of clients) {
      await prisma.client.update({
        where: { id: client.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${clients.length} clientes atualizados`)

    // 7. Atualizar loca√ß√µes existentes
    console.log('üìÖ Atualizando loca√ß√µes existentes...')
    const bookings = await prisma.booking.findMany()
    for (const booking of bookings) {
      await prisma.booking.update({
        where: { id: booking.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${bookings.length} loca√ß√µes atualizadas`)

    // 8. Atualizar atividades existentes
    console.log('üìä Atualizando atividades existentes...')
    const activities = await prisma.activity.findMany()
    for (const activity of activities) {
      await prisma.activity.update({
        where: { id: activity.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${activities.length} atividades atualizadas`)

    // 9. Atualizar lembretes existentes
    console.log('üîî Atualizando lembretes existentes...')
    const reminders = await prisma.reminder.findMany()
    for (const reminder of reminders) {
      await prisma.reminder.update({
        where: { id: reminder.id },
        data: { companyId: defaultCompany.id }
      })
    }
    console.log(`‚úÖ ${reminders.length} lembretes atualizados`)

    console.log('üéâ Migra√ß√£o para multi-tenancy conclu√≠da com sucesso!')
    console.log(`üìä Empresa padr√£o criada: ${defaultCompany.name} (${defaultCompany.id})`)
    console.log('üí° Agora cada nova conta ter√° sua pr√≥pria empresa isolada')

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar a migra√ß√£o
migrateToMultiTenancy()
  .then(() => {
    console.log('‚úÖ Script de migra√ß√£o executado com sucesso')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Falha na migra√ß√£o:', error)
    process.exit(1)
  })
