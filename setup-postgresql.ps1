# Script completo de setup para PostgreSQL Local
# Execute como administrador

param(
    [string]$Password = "postgres",
    [string]$Database = "led_rental_db",
    [string]$Port = "5432"
)

Write-Host "üêò Setup Completo PostgreSQL Local" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# 1. Verificar se PostgreSQL est√° instalado
Write-Host "`n1. Verificando PostgreSQL..." -ForegroundColor Yellow
if (Get-Command psql -ErrorAction SilentlyContinue) {
    Write-Host "‚úÖ PostgreSQL j√° est√° instalado!" -ForegroundColor Green
    $postgresVersion = psql --version
    Write-Host "   Vers√£o: $postgresVersion" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå PostgreSQL n√£o encontrado. Instalando..." -ForegroundColor Red
    
    # Verificar Chocolatey
    if (Get-Command choco -ErrorAction SilentlyContinue) {
        Write-Host "üì¶ Instalando via Chocolatey..." -ForegroundColor Blue
        choco install postgresql -y
    } else {
        Write-Host "üì• Baixando PostgreSQL manualmente..." -ForegroundColor Blue
        $postgresUrl = "https://get.enterprisedb.com/postgresql/postgresql-15.5-1-windows-x64.exe"
        $installerPath = "$env:TEMP\postgresql-installer.exe"
        
        Invoke-WebRequest -Uri $postgresUrl -OutFile $installerPath
        Write-Host "üöÄ Executando instalador..." -ForegroundColor Blue
        Write-Host "‚ö†Ô∏è IMPORTANTE: Senha: $Password, Porta: $Port" -ForegroundColor Red
        
        Start-Process -FilePath $installerPath -Wait
        Remove-Item $installerPath -Force
    }
    
    # Aguardar instala√ß√£o
    Start-Sleep -Seconds 10
}

# 2. Verificar se o servi√ßo est√° rodando
Write-Host "`n2. Verificando servi√ßo PostgreSQL..." -ForegroundColor Yellow
$service = Get-Service -Name "postgresql*" -ErrorAction SilentlyContinue
if ($service) {
    if ($service.Status -eq "Running") {
        Write-Host "‚úÖ Servi√ßo PostgreSQL rodando!" -ForegroundColor Green
    } else {
        Write-Host "üîÑ Iniciando servi√ßo PostgreSQL..." -ForegroundColor Yellow
        Start-Service $service.Name
        Start-Sleep -Seconds 5
    }
} else {
    Write-Host "‚ùå Servi√ßo PostgreSQL n√£o encontrado" -ForegroundColor Red
    Write-Host "   Tente reiniciar o computador e executar novamente" -ForegroundColor Yellow
    exit 1
}

# 3. Testar conex√£o
Write-Host "`n3. Testando conex√£o..." -ForegroundColor Yellow
try {
    $testConnection = psql -U postgres -h localhost -p $Port -c "SELECT version();" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Conex√£o com PostgreSQL OK!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro na conex√£o. Verificando..." -ForegroundColor Red
        Write-Host "   Erro: $testConnection" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erro ao conectar: $_" -ForegroundColor Red
    exit 1
}

# 4. Criar banco de dados
Write-Host "`n4. Criando banco de dados..." -ForegroundColor Yellow
try {
    $createDB = psql -U postgres -h localhost -p $Port -c "CREATE DATABASE $Database;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Banco '$Database' criado com sucesso!" -ForegroundColor Green
    } else {
        if ($createDB -like "*already exists*") {
            Write-Host "‚ÑπÔ∏è Banco '$Database' j√° existe!" -ForegroundColor Cyan
        } else {
            Write-Host "‚ùå Erro ao criar banco: $createDB" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "‚ùå Erro ao criar banco: $_" -ForegroundColor Red
    exit 1
}

# 5. Criar arquivo .env
Write-Host "`n5. Criando arquivo .env..." -ForegroundColor Yellow
$envContent = @"
# PostgreSQL Local - Configura√ß√£o
DATABASE_URL="postgresql://postgres:$Password@localhost:$Port/$Database"

# JWT Secret (Altere para produ√ß√£o)
JWT_SECRET="led-rental-app-super-secret-jwt-key-2024-123456789"

# Next.js
NEXTAUTH_SECRET="led-rental-app-nextauth-secret-2024"
NEXTAUTH_URL="http://localhost:3000"

# Configura√ß√µes do Banco
DB_HOST="localhost"
DB_PORT="$Port"
DB_USER="postgres"
DB_NAME="$Database"
"@

try {
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "‚úÖ Arquivo .env criado!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao criar .env: $_" -ForegroundColor Red
}

# 6. Instalar depend√™ncias
Write-Host "`n6. Instalando depend√™ncias..." -ForegroundColor Yellow
try {
    npm install
    Write-Host "‚úÖ Depend√™ncias instaladas!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias: $_" -ForegroundColor Red
}

# 7. Gerar Prisma Client
Write-Host "`n7. Gerando Prisma Client..." -ForegroundColor Yellow
try {
    npx prisma generate
    Write-Host "‚úÖ Prisma Client gerado!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao gerar Prisma Client: $_" -ForegroundColor Red
}

# 8. Executar migra√ß√µes
Write-Host "`n8. Executando migra√ß√µes..." -ForegroundColor Yellow
try {
    npx prisma migrate dev --name init
    Write-Host "‚úÖ Migra√ß√µes executadas!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro nas migra√ß√µes: $_" -ForegroundColor Red
}

# Resumo final
Write-Host "`nüéâ Setup Completo!" -ForegroundColor Green
Write-Host "=================" -ForegroundColor Green
Write-Host "‚úÖ PostgreSQL instalado e configurado" -ForegroundColor Green
Write-Host "‚úÖ Banco '$Database' criado" -ForegroundColor Green
Write-Host "‚úÖ Arquivo .env configurado" -ForegroundColor Green
Write-Host "‚úÖ Depend√™ncias instaladas" -ForegroundColor Green
Write-Host "‚úÖ Prisma configurado" -ForegroundColor Green
Write-Host "‚úÖ Migra√ß√µes executadas" -ForegroundColor Green

Write-Host "`nüöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "1. Iniciar servidor: npm run dev" -ForegroundColor White
Write-Host "2. Acessar: http://localhost:3000" -ForegroundColor White
Write-Host "3. Criar conta e testar o sistema" -ForegroundColor White

Write-Host "`nüìñ Documenta√ß√£o:" -ForegroundColor Cyan
Write-Host "- README.md - Guia principal" -ForegroundColor White
Write-Host "- POSTGRESQL-LOCAL-SETUP.md - Setup detalhado" -ForegroundColor White
Write-Host "- QUICK-POSTGRESQL.md - Setup r√°pido" -ForegroundColor White

Write-Host "`nüîß Configura√ß√µes:" -ForegroundColor Cyan
Write-Host "- Host: localhost" -ForegroundColor White
Write-Host "- Porta: $Port" -ForegroundColor White
Write-Host "- Usu√°rio: postgres" -ForegroundColor White
Write-Host "- Senha: $Password" -ForegroundColor White
Write-Host "- Banco: $Database" -ForegroundColor White
