"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/bookings/[id]/route";
exports.ids = ["app/api/bookings/[id]/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&page=%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbookings%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&page=%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbookings%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_marco_Downloads_led_rental_app_min_led_rental_app_src_app_api_bookings_id_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/bookings/[id]/route.ts */ \"(rsc)/./src/app/api/bookings/[id]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/bookings/[id]/route\",\n        pathname: \"/api/bookings/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/bookings/[id]/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\marco\\\\Downloads\\\\led-rental-app-min\\\\led-rental-app\\\\src\\\\app\\\\api\\\\bookings\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_marco_Downloads_led_rental_app_min_led_rental_app_src_app_api_bookings_id_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/bookings/[id]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZib29raW5ncyUyRiU1QmlkJTVEJTJGcm91dGUmcGFnZT0lMkZhcGklMkZib29raW5ncyUyRiU1QmlkJTVEJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYm9va2luZ3MlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNtYXJjbyU1Q0Rvd25sb2FkcyU1Q2xlZC1yZW50YWwtYXBwLW1pbiU1Q2xlZC1yZW50YWwtYXBwJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNtYXJjbyU1Q0Rvd25sb2FkcyU1Q2xlZC1yZW50YWwtYXBwLW1pbiU1Q2xlZC1yZW50YWwtYXBwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN3RDtBQUNySTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZC1yZW50YWwtYXBwLz8xNzVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXG1hcmNvXFxcXERvd25sb2Fkc1xcXFxsZWQtcmVudGFsLWFwcC1taW5cXFxcbGVkLXJlbnRhbC1hcHBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYm9va2luZ3NcXFxcW2lkXVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYm9va2luZ3MvW2lkXS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Jvb2tpbmdzL1tpZF1cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Jvb2tpbmdzL1tpZF0vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxtYXJjb1xcXFxEb3dubG9hZHNcXFxcbGVkLXJlbnRhbC1hcHAtbWluXFxcXGxlZC1yZW50YWwtYXBwXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGJvb2tpbmdzXFxcXFtpZF1cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2Jvb2tpbmdzL1tpZF0vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&page=%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbookings%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/bookings/[id]/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/bookings/[id]/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./src/lib/db.ts\");\n/* harmony import */ var _lib_inventory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/inventory */ \"(rsc)/./src/lib/inventory.ts\");\n\n\n\nasync function DELETE(request, { params }) {\n    try {\n        const bookingId = params.id;\n        if (!bookingId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"ID da loca\\xe7\\xe3o \\xe9 obrigat\\xf3rio\"\n            }, {\n                status: 400\n            });\n        }\n        // Verificar se a locação existe\n        const existingBooking = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.booking.findUnique({\n            where: {\n                id: bookingId\n            },\n            include: {\n                items: true,\n                accessories: true,\n                equipment: true\n            }\n        });\n        if (!existingBooking) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Loca\\xe7\\xe3o n\\xe3o encontrada\"\n            }, {\n                status: 404\n            });\n        }\n        // Excluir a locação e todos os itens relacionados\n        await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n            // Excluir itens de produtos\n            if (existingBooking.items.length > 0) {\n                await tx.bookingItem.deleteMany({\n                    where: {\n                        bookingId\n                    }\n                });\n            }\n            // Excluir itens de acessórios\n            if (existingBooking.accessories.length > 0) {\n                await tx.bookingAccessory.deleteMany({\n                    where: {\n                        bookingId\n                    }\n                });\n            }\n            // Excluir itens de equipamentos\n            if (existingBooking.equipment.length > 0) {\n                await tx.bookingEquipment.deleteMany({\n                    where: {\n                        bookingId\n                    }\n                });\n            }\n            // Excluir a locação\n            await tx.booking.delete({\n                where: {\n                    id: bookingId\n                }\n            });\n        });\n        // Restaurar o estoque automaticamente\n        try {\n            await _lib_inventory__WEBPACK_IMPORTED_MODULE_2__.InventoryService.restoreInventoryOnBookingDelete(bookingId);\n            console.log(\"Estoque restaurado automaticamente ap\\xf3s exclus\\xe3o\");\n        } catch (inventoryError) {\n            console.error(\"Erro ao restaurar estoque:\", inventoryError);\n        // Não falha a exclusão por erro no estoque\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Loca\\xe7\\xe3o exclu\\xedda com sucesso\"\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Erro ao excluir loca\\xe7\\xe3o:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Erro interno do servidor\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request, { params }) {\n    try {\n        const bookingId = params.id;\n        const body = await request.json();\n        if (!bookingId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"ID da loca\\xe7\\xe3o \\xe9 obrigat\\xf3rio\"\n            }, {\n                status: 400\n            });\n        }\n        // Verificar se a locação existe\n        const existingBooking = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.booking.findUnique({\n            where: {\n                id: bookingId\n            },\n            include: {\n                items: true,\n                accessories: true,\n                equipment: true\n            }\n        });\n        if (!existingBooking) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Loca\\xe7\\xe3o n\\xe3o encontrada\"\n            }, {\n                status: 404\n            });\n        }\n        // Atualizar a locação\n        const updatedBooking = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.booking.update({\n            where: {\n                id: bookingId\n            },\n            data: {\n                eventTitle: body.eventTitle || existingBooking.eventTitle,\n                eventAddress: body.eventAddress || existingBooking.eventAddress,\n                startDate: body.startDate ? new Date(body.startDate) : existingBooking.startDate,\n                endDate: body.endDate ? new Date(body.endDate) : existingBooking.endDate,\n                totalValue: body.totalValue ? parseFloat(body.totalValue) : existingBooking.totalValue,\n                status: body.status || existingBooking.status,\n                paymentStatus: body.paymentStatus || existingBooking.paymentStatus,\n                notes: body.notes || existingBooking.notes\n            }\n        });\n        // Se houve mudança nos itens, atualizar o estoque\n        if (body.products || body.accessories || body.equipment) {\n            try {\n                // Restaurar estoque antigo\n                await _lib_inventory__WEBPACK_IMPORTED_MODULE_2__.InventoryService.restoreInventoryOnBookingDelete(bookingId);\n                // Aplicar novos itens\n                if (body.products) {\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingItem.deleteMany({\n                        where: {\n                            bookingId\n                        }\n                    });\n                    if (body.products.length > 0) {\n                        await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingItem.createMany({\n                            data: body.products.map((p)=>({\n                                    bookingId,\n                                    productId: p.productId,\n                                    meters: parseInt(p.meters) || 1,\n                                    price: 0.00\n                                }))\n                        });\n                    }\n                }\n                if (body.accessories) {\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingAccessory.deleteMany({\n                        where: {\n                            bookingId\n                        }\n                    });\n                    if (body.accessories.length > 0) {\n                        await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingAccessory.createMany({\n                            data: body.accessories.map((a)=>({\n                                    bookingId,\n                                    accessoryId: a.accessoryId,\n                                    qty: parseInt(a.qty) || 1,\n                                    price: 0.00\n                                }))\n                        });\n                    }\n                }\n                if (body.equipment) {\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingEquipment.deleteMany({\n                        where: {\n                            bookingId\n                        }\n                    });\n                    if (body.equipment.length > 0) {\n                        await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.bookingEquipment.createMany({\n                            data: body.equipment.map((e)=>({\n                                    bookingId,\n                                    equipmentId: e.equipmentId,\n                                    qty: parseInt(e.qty) || 1,\n                                    price: 0.00\n                                }))\n                        });\n                    }\n                }\n                // Atualizar estoque com novos itens\n                await _lib_inventory__WEBPACK_IMPORTED_MODULE_2__.InventoryService.updateInventoryOnBookingCreate(bookingId);\n                console.log(\"Estoque atualizado ap\\xf3s modifica\\xe7\\xe3o da loca\\xe7\\xe3o\");\n            } catch (inventoryError) {\n                console.error(\"Erro ao atualizar estoque:\", inventoryError);\n            // Não falha a modificação por erro no estoque\n            }\n        }\n        // Buscar a locação atualizada com todos os dados\n        const finalBooking = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.booking.findUnique({\n            where: {\n                id: bookingId\n            },\n            include: {\n                client: {\n                    select: {\n                        name: true,\n                        email: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                accessories: {\n                    include: {\n                        accessory: true\n                    }\n                },\n                equipment: {\n                    include: {\n                        equipment: true\n                    }\n                }\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(finalBooking, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Erro ao modificar loca\\xe7\\xe3o:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Erro interno do servidor\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request, { params }) {\n    try {\n        const bookingId = params.id;\n        if (!bookingId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"ID da loca\\xe7\\xe3o \\xe9 obrigat\\xf3rio\"\n            }, {\n                status: 400\n            });\n        }\n        const booking = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.booking.findUnique({\n            where: {\n                id: bookingId\n            },\n            include: {\n                client: {\n                    select: {\n                        name: true,\n                        email: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                accessories: {\n                    include: {\n                        accessory: true\n                    }\n                },\n                equipment: {\n                    include: {\n                        equipment: true\n                    }\n                }\n            }\n        });\n        if (!booking) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Loca\\xe7\\xe3o n\\xe3o encontrada\"\n            }, {\n                status: 404\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(booking);\n    } catch (error) {\n        console.error(\"Erro ao buscar loca\\xe7\\xe3o:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Erro interno do servidor\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/bookings/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2RiLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZC1yZW50YWwtYXBwLy4vc3JjL2xpYi9kYi50cz85ZTRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xyXG5cclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcclxuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hXHJcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/inventory.ts":
/*!******************************!*\
  !*** ./src/lib/inventory.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InventoryService: () => (/* binding */ InventoryService),\n/* harmony export */   runInventoryMaintenance: () => (/* binding */ runInventoryMaintenance)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./src/lib/db.ts\");\n\nclass InventoryService {\n    /**\r\n   * Atualiza o estoque quando uma locação é criada\r\n   */ static async updateInventoryOnBookingCreate(bookingId) {\n        try {\n            // Buscar a locação com todos os itens\n            const booking = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findUnique({\n                where: {\n                    id: bookingId\n                },\n                include: {\n                    items: true,\n                    accessories: true,\n                    equipment: true\n                }\n            });\n            if (!booking) {\n                throw new Error(\"Loca\\xe7\\xe3o n\\xe3o encontrada\");\n            }\n            // Verificar se o status da locação deve ocupar estoque\n            const activeStatuses = [\n                \"CONFIRMED\",\n                \"PENDING\",\n                \"IN_PROGRESS\"\n            ];\n            if (!activeStatuses.includes(booking.status)) {\n                console.log(`⚠️  Locação ${bookingId} com status ${booking.status} não ocupa estoque`);\n                return;\n            }\n            console.log(`Atualizando estoque para locação ${bookingId} (status: ${booking.status}):`, {\n                produtos: booking.items.length,\n                acessorios: booking.accessories.length,\n                equipamentos: booking.equipment.length\n            });\n            // Atualizar estoque de produtos (metros)\n            for (const item of booking.items){\n                if (item.meters > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.update({\n                        where: {\n                            id: item.productId\n                        },\n                        data: {\n                            occupiedMeters: {\n                                increment: item.meters\n                            }\n                        }\n                    });\n                    console.log(`  📦 Produto ${item.productId}: +${item.meters}m² ocupados`);\n                }\n            }\n            // Atualizar estoque de acessórios (unidades)\n            for (const accessory of booking.accessories){\n                if (accessory.qty > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.update({\n                        where: {\n                            id: accessory.accessoryId\n                        },\n                        data: {\n                            occupiedQty: {\n                                increment: accessory.qty\n                            }\n                        }\n                    });\n                    console.log(`  ⚙️ Acessório ${accessory.accessoryId}: +${accessory.qty} unidades ocupadas`);\n                }\n            }\n            // Atualizar estoque de equipamentos (unidades)\n            for (const equipment of booking.equipment){\n                if (equipment.qty > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.update({\n                        where: {\n                            id: equipment.equipmentId\n                        },\n                        data: {\n                            occupiedQty: {\n                                increment: equipment.qty\n                            }\n                        }\n                    });\n                    console.log(`  🔧 Equipamento ${equipment.equipmentId}: +${equipment.qty} unidades ocupadas`);\n                }\n            }\n            console.log(`✅ Estoque atualizado com sucesso para locação ${bookingId}`);\n        } catch (error) {\n            console.error(\"❌ Erro ao atualizar estoque:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Restaura o estoque quando uma locação é excluída\r\n   */ static async restoreInventoryOnBookingDelete(bookingId) {\n        try {\n            // Buscar a locação com todos os itens\n            const booking = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findUnique({\n                where: {\n                    id: bookingId\n                },\n                include: {\n                    items: true,\n                    accessories: true,\n                    equipment: true\n                }\n            });\n            if (!booking) {\n                throw new Error(\"Loca\\xe7\\xe3o n\\xe3o encontrada\");\n            }\n            // Verificar se o status da locação ocupava estoque\n            const activeStatuses = [\n                \"CONFIRMED\",\n                \"PENDING\",\n                \"IN_PROGRESS\"\n            ];\n            if (!activeStatuses.includes(booking.status)) {\n                console.log(`⚠️  Locação ${bookingId} com status ${booking.status} não ocupava estoque`);\n                return;\n            }\n            console.log(`Restaurando estoque para locação ${bookingId} (status: ${booking.status}):`);\n            // Restaurar estoque de produtos\n            for (const item of booking.items){\n                if (item.meters > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.update({\n                        where: {\n                            id: item.productId\n                        },\n                        data: {\n                            occupiedMeters: {\n                                decrement: item.meters\n                            }\n                        }\n                    });\n                    console.log(`  📦 Produto ${item.productId}: -${item.meters}m² restaurados`);\n                }\n            }\n            // Restaurar estoque de acessórios\n            for (const accessory of booking.accessories){\n                if (accessory.qty > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.update({\n                        where: {\n                            id: accessory.accessoryId\n                        },\n                        data: {\n                            occupiedQty: {\n                                decrement: accessory.qty\n                            }\n                        }\n                    });\n                    console.log(`  ⚙️ Acessório ${accessory.accessoryId}: -${accessory.qty} unidades restauradas`);\n                }\n            }\n            // Restaurar estoque de equipamentos\n            for (const equipment of booking.equipment){\n                if (equipment.qty > 0) {\n                    await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.update({\n                        where: {\n                            id: equipment.equipmentId\n                        },\n                        data: {\n                            occupiedQty: {\n                                decrement: equipment.qty\n                            }\n                        }\n                    });\n                    console.log(`  🔧 Equipamento ${equipment.equipmentId}: -${equipment.qty} unidades restauradas`);\n                }\n            }\n            console.log(`✅ Estoque restaurado com sucesso para locação ${bookingId}`);\n        } catch (error) {\n            console.error(\"❌ Erro ao restaurar estoque:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Atualiza o estoque quando uma locação é modificada\r\n   */ static async updateInventoryOnBookingModify(bookingId, oldItems, newItems) {\n        try {\n            // Primeiro, restaurar o estoque antigo\n            await this.restoreInventoryOnBookingDelete(bookingId);\n            // Depois, aplicar o novo estoque\n            await this.updateInventoryOnBookingCreate(bookingId);\n            console.log(`Estoque atualizado para modificação da locação ${bookingId}`);\n        } catch (error) {\n            console.error(\"Erro ao atualizar estoque na modifica\\xe7\\xe3o:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Verifica e atualiza estoque de locações expiradas\r\n   */ static async checkExpiredBookings() {\n        try {\n            const now = new Date();\n            // Buscar locações expiradas (endDate < now) com status ativo\n            const expiredBookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n                where: {\n                    endDate: {\n                        lt: now\n                    },\n                    status: {\n                        in: [\n                            \"CONFIRMED\",\n                            \"PENDING\",\n                            \"IN_PROGRESS\"\n                        ]\n                    }\n                },\n                include: {\n                    items: true,\n                    accessories: true,\n                    equipment: true\n                }\n            });\n            console.log(`Encontradas ${expiredBookings.length} locações expiradas`);\n            for (const booking of expiredBookings){\n                // Marcar como COMPLETED\n                await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.update({\n                    where: {\n                        id: booking.id\n                    },\n                    data: {\n                        status: \"COMPLETED\"\n                    }\n                });\n                // Restaurar estoque\n                await this.restoreInventoryOnBookingDelete(booking.id);\n                console.log(`Locação ${booking.id} marcada como expirada e estoque restaurado`);\n            }\n            return expiredBookings.length;\n        } catch (error) {\n            console.error(\"Erro ao verificar loca\\xe7\\xf5es expiradas:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Corrige estoque de locações com status incorreto\r\n   */ static async fixInventoryStatus() {\n        try {\n            console.log(\"\\uD83D\\uDD27 Corrigindo status do estoque...\");\n            // Buscar todas as locações\n            const allBookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n                include: {\n                    items: true,\n                    accessories: true,\n                    equipment: true\n                }\n            });\n            let fixedCount = 0;\n            const activeStatuses = [\n                \"CONFIRMED\",\n                \"PENDING\",\n                \"IN_PROGRESS\"\n            ];\n            for (const booking of allBookings){\n                const shouldOccupyStock = activeStatuses.includes(booking.status);\n                let needsFix = false;\n                // Verificar produtos\n                for (const item of booking.items){\n                    const product = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.findUnique({\n                        where: {\n                            id: item.productId\n                        }\n                    });\n                    if (product) {\n                        const currentOccupied = product.occupiedMeters || 0;\n                        const expectedOccupied = shouldOccupyStock ? item.meters : 0;\n                        if (currentOccupied !== expectedOccupied) {\n                            needsFix = true;\n                            console.log(`  📦 Produto ${product.name}: ocupado=${currentOccupied}, esperado=${expectedOccupied}`);\n                        }\n                    }\n                }\n                // Verificar acessórios\n                for (const accessory of booking.accessories){\n                    const acc = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.findUnique({\n                        where: {\n                            id: accessory.accessoryId\n                        }\n                    });\n                    if (acc) {\n                        const currentOccupied = acc.occupiedQty || 0;\n                        const expectedOccupied = shouldOccupyStock ? accessory.qty : 0;\n                        if (currentOccupied !== expectedOccupied) {\n                            needsFix = true;\n                            console.log(`  ⚙️ Acessório ${acc.name}: ocupado=${currentOccupied}, esperado=${expectedOccupied}`);\n                        }\n                    }\n                }\n                // Verificar equipamentos\n                for (const equip of booking.equipment){\n                    const eq = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.findUnique({\n                        where: {\n                            id: equip.equipmentId\n                        }\n                    });\n                    if (eq) {\n                        const currentOccupied = eq.occupiedQty || 0;\n                        const expectedOccupied = shouldOccupyStock ? equip.qty : 0;\n                        if (currentOccupied !== expectedOccupied) {\n                            needsFix = true;\n                            console.log(`  🔧 Equipamento ${eq.name}: ocupado=${currentOccupied}, esperado=${expectedOccupied}`);\n                        }\n                    }\n                }\n                if (needsFix) {\n                    console.log(`  🔄 Corrigindo locação ${booking.id} (${booking.eventTitle})`);\n                    // Restaurar estoque atual\n                    await this.restoreInventoryOnBookingDelete(booking.id);\n                    // Aplicar estoque correto se necessário\n                    if (shouldOccupyStock) {\n                        await this.updateInventoryOnBookingCreate(booking.id);\n                    }\n                    fixedCount++;\n                }\n            }\n            console.log(`✅ Correção concluída: ${fixedCount} locações corrigidas`);\n            return fixedCount;\n        } catch (error) {\n            console.error(\"❌ Erro ao corrigir estoque:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Valida disponibilidade de estoque para um período específico\r\n   */ static async validateAvailabilityForPeriod(startDate, endDate, products, accessories, equipment, excludeBookingId // Para edição de locações existentes\n    ) {\n        try {\n            console.log(\"\\uD83D\\uDD0D Validando disponibilidade para per\\xedodo:\", {\n                startDate: startDate.toISOString(),\n                endDate: endDate.toISOString(),\n                produtos: products.length,\n                acessorios: accessories.length,\n                equipamentos: equipment.length\n            });\n            const conflicts = [];\n            let totalBookings = 0;\n            let totalConflicts = 0;\n            // 1. Validar produtos (metros)\n            for (const product of products){\n                if (product.meters > 0) {\n                    const productInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.findUnique({\n                        where: {\n                            id: product.productId\n                        }\n                    });\n                    if (productInfo) {\n                        const conflict = await this.checkProductAvailability(productInfo, product.meters, startDate, endDate, excludeBookingId);\n                        if (conflict) {\n                            conflicts.push(conflict);\n                            totalConflicts++;\n                        }\n                    }\n                }\n            }\n            // 2. Validar acessórios (unidades)\n            for (const accessory of accessories){\n                if (accessory.qty > 0) {\n                    const accessoryInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.findUnique({\n                        where: {\n                            id: accessory.accessoryId\n                        }\n                    });\n                    if (accessoryInfo) {\n                        const conflict = await this.checkAccessoryAvailability(accessoryInfo, accessory.qty, startDate, endDate, excludeBookingId);\n                        if (conflict) {\n                            conflicts.push(conflict);\n                            totalConflicts++;\n                        }\n                    }\n                }\n            }\n            // 3. Validar equipamentos (unidades)\n            for (const equip of equipment){\n                if (equip.qty > 0) {\n                    const equipmentInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.findUnique({\n                        where: {\n                            id: equip.equipmentId\n                        }\n                    });\n                    if (equipmentInfo) {\n                        const conflict = await this.checkEquipmentAvailability(equipmentInfo, equip.qty, startDate, endDate, excludeBookingId);\n                        if (conflict) {\n                            conflicts.push(conflict);\n                            totalConflicts++;\n                        }\n                    }\n                }\n            }\n            // 4. Contar total de locações no período\n            totalBookings = await this.countBookingsInPeriod(startDate, endDate, excludeBookingId);\n            const result = {\n                available: conflicts.length === 0,\n                conflicts,\n                periodAvailability: {\n                    startDate: startDate.toISOString(),\n                    endDate: endDate.toISOString(),\n                    totalBookings,\n                    totalConflicts: conflicts.length\n                }\n            };\n            console.log(`✅ Validação concluída: ${conflicts.length === 0 ? \"Estoque suficiente\" : `${conflicts.length} conflitos encontrados`}`);\n            return result;\n        } catch (error) {\n            console.error(\"❌ Erro ao validar disponibilidade para per\\xedodo:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Verifica disponibilidade de um produto específico para um período\r\n   */ static async checkProductAvailability(product, requestedMeters, startDate, endDate, excludeBookingId) {\n        // Buscar todas as locações ativas que sobrepõem o período\n        const overlappingBookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    excludeBookingId ? {\n                        id: {\n                            not: excludeBookingId\n                        }\n                    } : {}\n                ]\n            },\n            include: {\n                items: {\n                    where: {\n                        productId: product.id\n                    }\n                }\n            }\n        });\n        // Calcular metros ocupados no período\n        let occupiedMeters = 0;\n        const conflictingBookings = [];\n        for (const booking of overlappingBookings){\n            for (const item of booking.items){\n                occupiedMeters += item.meters;\n                conflictingBookings.push({\n                    id: booking.id,\n                    eventTitle: booking.eventTitle,\n                    startDate: booking.startDate,\n                    endDate: booking.endDate,\n                    quantity: item.meters\n                });\n            }\n        }\n        const availableMeters = product.totalMeters - occupiedMeters;\n        if (availableMeters < requestedMeters) {\n            return {\n                id: product.id,\n                type: \"PRODUTO\",\n                name: product.name,\n                requested: requestedMeters,\n                available: availableMeters,\n                total: product.totalMeters,\n                unit: \"m\\xb2\",\n                conflictingBookings\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Verifica disponibilidade de um acessório específico para um período\r\n   */ static async checkAccessoryAvailability(accessory, requestedQty, startDate, endDate, excludeBookingId) {\n        // Buscar todas as locações ativas que sobrepõem o período\n        const overlappingBookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    excludeBookingId ? {\n                        id: {\n                            not: excludeBookingId\n                        }\n                    } : {}\n                ]\n            },\n            include: {\n                accessories: {\n                    where: {\n                        accessoryId: accessory.id\n                    }\n                }\n            }\n        });\n        // Calcular unidades ocupadas no período\n        let occupiedQty = 0;\n        const conflictingBookings = [];\n        for (const booking of overlappingBookings){\n            for (const acc of booking.accessories){\n                occupiedQty += acc.qty;\n                conflictingBookings.push({\n                    id: booking.id,\n                    eventTitle: booking.eventTitle,\n                    startDate: booking.startDate,\n                    endDate: booking.endDate,\n                    quantity: acc.qty\n                });\n            }\n        }\n        const availableQty = accessory.totalQty - occupiedQty;\n        if (availableQty < requestedQty) {\n            return {\n                id: accessory.id,\n                type: \"ACESS\\xd3RIO\",\n                name: accessory.name,\n                requested: requestedQty,\n                available: availableQty,\n                total: accessory.totalQty,\n                unit: \"un\",\n                conflictingBookings\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Verifica disponibilidade de um equipamento específico para um período\r\n   */ static async checkEquipmentAvailability(equipment, requestedQty, startDate, endDate, excludeBookingId) {\n        // Buscar todas as locações ativas que sobrepõem o período\n        const overlappingBookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    excludeBookingId ? {\n                        id: {\n                            not: excludeBookingId\n                        }\n                    } : {}\n                ]\n            },\n            include: {\n                equipment: {\n                    where: {\n                        equipmentId: equipment.id\n                    }\n                }\n            }\n        });\n        // Calcular unidades ocupadas no período\n        let occupiedQty = 0;\n        const conflictingBookings = [];\n        for (const booking of overlappingBookings){\n            for (const equip of booking.equipment){\n                occupiedQty += equip.qty;\n                conflictingBookings.push({\n                    id: booking.id,\n                    eventTitle: booking.eventTitle,\n                    startDate: booking.startDate,\n                    endDate: booking.endDate,\n                    quantity: equip.qty\n                });\n            }\n        }\n        const availableQty = equipment.totalQty - occupiedQty;\n        if (availableQty < requestedQty) {\n            return {\n                id: equipment.id,\n                type: \"EQUIPAMENTO\",\n                name: equipment.name,\n                requested: requestedQty,\n                available: availableQty,\n                total: equipment.totalQty,\n                unit: \"un\",\n                conflictingBookings\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Conta o total de locações ativas em um período\r\n   */ static async countBookingsInPeriod(startDate, endDate, excludeBookingId) {\n        const count = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.count({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    excludeBookingId ? {\n                        id: {\n                            not: excludeBookingId\n                        }\n                    } : {}\n                ]\n            }\n        });\n        return count;\n    }\n    /**\r\n   * Obtém o status atual do estoque\r\n   */ static async getInventoryStatus() {\n        try {\n            const products = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.findMany({\n                select: {\n                    id: true,\n                    name: true,\n                    totalMeters: true,\n                    occupiedMeters: true\n                }\n            });\n            const accessories = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.findMany({\n                select: {\n                    id: true,\n                    name: true,\n                    totalQty: true,\n                    occupiedQty: true\n                }\n            });\n            const equipment = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.findMany({\n                select: {\n                    id: true,\n                    name: true,\n                    totalQty: true,\n                    occupiedQty: true\n                }\n            });\n            return {\n                products: products.map((p)=>({\n                        id: p.id,\n                        name: p.name,\n                        type: \"PRODUTO\",\n                        totalQuantity: p.totalMeters,\n                        occupiedQuantity: p.occupiedMeters,\n                        availableQuantity: p.totalMeters - p.occupiedMeters\n                    })),\n                accessories: accessories.map((a)=>({\n                        id: a.id,\n                        name: a.name,\n                        type: \"ACESS\\xd3RIO\",\n                        totalQuantity: a.totalQty,\n                        occupiedQuantity: a.occupiedQty,\n                        availableQuantity: a.totalQty - a.occupiedQty\n                    })),\n                equipment: equipment.map((e)=>({\n                        id: e.id,\n                        name: e.name,\n                        type: \"EQUIPAMENTO\",\n                        totalQuantity: e.totalQty,\n                        occupiedQuantity: e.occupiedQty,\n                        availableQuantity: e.totalQty - e.occupiedQty\n                    }))\n            };\n        } catch (error) {\n            console.error(\"Erro ao obter status do estoque:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Valida se há estoque suficiente para uma locação\r\n   */ static async validateInventoryAvailability(products, accessories, equipment) {\n        try {\n            const conflicts = [];\n            console.log(\"\\uD83D\\uDD0D Validando disponibilidade de estoque...\");\n            // Validar produtos (metros)\n            for (const product of products){\n                if (product.meters > 0) {\n                    const productInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.findUnique({\n                        where: {\n                            id: product.productId\n                        }\n                    });\n                    if (productInfo) {\n                        const available = productInfo.totalMeters - productInfo.occupiedMeters;\n                        console.log(`  📦 ${productInfo.name}: ${available}/${productInfo.totalMeters}m² disponíveis, solicitados: ${product.meters}m²`);\n                        if (available < product.meters) {\n                            conflicts.push({\n                                id: product.productId,\n                                type: \"PRODUTO\",\n                                name: productInfo.name,\n                                requested: product.meters,\n                                available,\n                                total: productInfo.totalMeters,\n                                unit: \"m\\xb2\"\n                            });\n                            console.log(`    ❌ Conflito: ${product.meters - available}m² insuficientes`);\n                        }\n                    }\n                }\n            }\n            // Validar acessórios (unidades)\n            for (const accessory of accessories){\n                if (accessory.qty > 0) {\n                    const accessoryInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.findUnique({\n                        where: {\n                            id: accessory.accessoryId\n                        }\n                    });\n                    if (accessoryInfo) {\n                        const available = accessoryInfo.totalQty - accessoryInfo.occupiedQty;\n                        console.log(`  ⚙️ ${accessoryInfo.name}: ${available}/${accessoryInfo.totalQty} unidades disponíveis, solicitadas: ${accessory.qty}`);\n                        if (available < accessory.qty) {\n                            conflicts.push({\n                                id: accessory.accessoryId,\n                                type: \"ACESS\\xd3RIO\",\n                                name: accessoryInfo.name,\n                                requested: accessory.qty,\n                                available,\n                                total: accessoryInfo.totalQty,\n                                unit: \"un\"\n                            });\n                            console.log(`    ❌ Conflito: ${accessory.qty - available} unidades insuficientes`);\n                        }\n                    }\n                }\n            }\n            // Validar equipamentos (unidades)\n            for (const equip of equipment){\n                if (equip.qty > 0) {\n                    const equipmentInfo = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.findUnique({\n                        where: {\n                            id: equip.equipmentId\n                        }\n                    });\n                    if (equipmentInfo) {\n                        const available = equipmentInfo.totalQty - equipmentInfo.occupiedQty;\n                        console.log(`  🔧 ${equipmentInfo.name}: ${available}/${equipmentInfo.totalQty} unidades disponíveis, solicitadas: ${equip.qty}`);\n                        if (available < equip.qty) {\n                            conflicts.push({\n                                id: equip.equipmentId,\n                                type: \"EQUIPAMENTO\",\n                                name: equipmentInfo.name,\n                                requested: equip.qty,\n                                available,\n                                total: equipmentInfo.totalQty,\n                                unit: \"un\"\n                            });\n                            console.log(`    ❌ Conflito: ${equip.qty - available} unidades insuficientes`);\n                        }\n                    }\n                }\n            }\n            const result = {\n                available: conflicts.length === 0,\n                conflicts\n            };\n            console.log(`✅ Validação concluída: ${conflicts.length === 0 ? \"Estoque suficiente\" : `${conflicts.length} conflitos encontrados`}`);\n            return result;\n        } catch (error) {\n            console.error(\"❌ Erro ao validar disponibilidade do estoque:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Obtém o status detalhado do estoque para um período específico\r\n   */ static async getDetailedInventoryStatus(startDate, endDate) {\n        try {\n            const products = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.product.findMany();\n            const accessories = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.accessory.findMany();\n            const equipment = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.equipment.findMany();\n            const productStatus = await Promise.all(products.map(async (p)=>{\n                const activeBookings = startDate && endDate ? await this.countProductBookingsInPeriod(p.id, startDate, endDate) : await this.countActiveProductBookings(p.id);\n                return {\n                    id: p.id,\n                    name: p.name,\n                    totalMeters: p.totalMeters,\n                    occupiedMeters: p.occupiedMeters || 0,\n                    availableMeters: p.totalMeters - (p.occupiedMeters || 0),\n                    utilization: p.totalMeters > 0 ? (p.occupiedMeters || 0) / p.totalMeters * 100 : 0,\n                    activeBookings\n                };\n            }));\n            const accessoryStatus = await Promise.all(accessories.map(async (a)=>{\n                const activeBookings = startDate && endDate ? await this.countAccessoryBookingsInPeriod(a.id, startDate, endDate) : await this.countActiveAccessoryBookings(a.id);\n                return {\n                    id: a.id,\n                    name: a.name,\n                    totalQty: a.totalQty,\n                    occupiedQty: a.occupiedQty || 0,\n                    availableQty: a.totalQty - (a.occupiedQty || 0),\n                    utilization: a.totalQty > 0 ? (a.occupiedQty || 0) / a.totalQty * 100 : 0,\n                    activeBookings\n                };\n            }));\n            const equipmentStatus = await Promise.all(equipment.map(async (e)=>{\n                const activeBookings = startDate && endDate ? await this.countEquipmentBookingsInPeriod(e.id, startDate, endDate) : await this.countActiveEquipmentBookings(e.id);\n                return {\n                    id: e.id,\n                    name: e.name,\n                    totalQty: e.totalQty,\n                    occupiedQty: e.occupiedQty || 0,\n                    availableQty: e.totalQty - (e.occupiedQty || 0),\n                    utilization: e.totalQty > 0 ? (e.occupiedQty || 0) / e.totalQty * 100 : 0,\n                    activeBookings\n                };\n            }));\n            // Calcular resumo geral\n            const totalItems = products.length + accessories.length + equipment.length;\n            const totalOccupied = productStatus.reduce((sum, p)=>sum + p.occupiedMeters, 0) + accessoryStatus.reduce((sum, a)=>sum + a.occupiedQty, 0) + equipmentStatus.reduce((sum, e)=>sum + e.occupiedQty, 0);\n            const totalAvailable = productStatus.reduce((sum, p)=>sum + p.availableMeters, 0) + accessoryStatus.reduce((sum, a)=>sum + a.availableQty, 0) + equipmentStatus.reduce((sum, e)=>sum + e.availableQty, 0);\n            const totalCapacity = productStatus.reduce((sum, p)=>sum + p.totalMeters, 0) + accessoryStatus.reduce((sum, a)=>sum + a.totalQty, 0) + equipmentStatus.reduce((sum, e)=>sum + e.totalQty, 0);\n            const overallUtilization = totalCapacity > 0 ? totalOccupied / totalCapacity * 100 : 0;\n            return {\n                period: {\n                    startDate: startDate?.toISOString(),\n                    endDate: endDate?.toISOString()\n                },\n                products: productStatus,\n                accessories: accessoryStatus,\n                equipment: equipmentStatus,\n                summary: {\n                    totalItems,\n                    totalOccupied,\n                    totalAvailable,\n                    overallUtilization: Math.round(overallUtilization * 100) / 100\n                }\n            };\n        } catch (error) {\n            console.error(\"❌ Erro ao obter status detalhado do estoque:\", error);\n            throw error;\n        }\n    }\n    // Funções auxiliares para contar locações\n    static async countProductBookingsInPeriod(productId, startDate, endDate) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        items: {\n                            some: {\n                                productId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings.length;\n    }\n    static async countAccessoryBookingsInPeriod(accessoryId, startDate, endDate) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        accessories: {\n                            some: {\n                                accessoryId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings.length;\n    }\n    static async countEquipmentBookingsInPeriod(equipmentId, startDate, endDate) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.findMany({\n            where: {\n                AND: [\n                    {\n                        OR: [\n                            {\n                                startDate: {\n                                    lte: endDate\n                                },\n                                endDate: {\n                                    gte: startDate\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        equipment: {\n                            some: {\n                                equipmentId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings.length;\n    }\n    static async countActiveProductBookings(productId) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.count({\n            where: {\n                AND: [\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        items: {\n                            some: {\n                                productId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings;\n    }\n    static async countActiveAccessoryBookings(accessoryId) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.count({\n            where: {\n                AND: [\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        accessories: {\n                            some: {\n                                accessoryId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings;\n    }\n    static async countActiveEquipmentBookings(equipmentId) {\n        const bookings = await _db__WEBPACK_IMPORTED_MODULE_0__.prisma.booking.count({\n            where: {\n                AND: [\n                    {\n                        status: {\n                            in: [\n                                \"CONFIRMED\",\n                                \"PENDING\",\n                                \"IN_PROGRESS\"\n                            ]\n                        }\n                    },\n                    {\n                        equipment: {\n                            some: {\n                                equipmentId\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n        return bookings;\n    }\n}\n// Função para executar verificação periódica de locações expiradas\nasync function runInventoryMaintenance() {\n    try {\n        console.log(\"\\uD83D\\uDE80 Iniciando manuten\\xe7\\xe3o completa do estoque...\");\n        // 1. Corrigir status do estoque\n        const fixedCount = await InventoryService.fixInventoryStatus();\n        console.log(`✅ Status corrigido: ${fixedCount} locações`);\n        // 2. Verificar locações expiradas\n        const expiredCount = await InventoryService.checkExpiredBookings();\n        console.log(`✅ Expirações processadas: ${expiredCount} locações`);\n        console.log(`🎉 Manutenção de estoque concluída. Total: ${fixedCount + expiredCount} operações`);\n        return {\n            fixed: fixedCount,\n            expired: expiredCount\n        };\n    } catch (error) {\n        console.error(\"❌ Erro na manuten\\xe7\\xe3o de estoque:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkLXJlbnRhbC1hcHAvLi9zcmMvbGliL2ludmVudG9yeS50cz8wYjc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4vZGInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEludmVudG9yeUl0ZW0ge1xyXG4gIGlkOiBzdHJpbmdcclxuICBuYW1lOiBzdHJpbmdcclxuICB0eXBlOiAnUFJPRFVUTycgfCAnQUNFU1PDk1JJTycgfCAnRVFVSVBBTUVOVE8nXHJcbiAgdG90YWxRdWFudGl0eTogbnVtYmVyXHJcbiAgb2NjdXBpZWRRdWFudGl0eTogbnVtYmVyXHJcbiAgYXZhaWxhYmxlUXVhbnRpdHk6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJvb2tpbmdDb25mbGljdCB7XHJcbiAgaWQ6IHN0cmluZ1xyXG4gIHR5cGU6IHN0cmluZ1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIHJlcXVlc3RlZDogbnVtYmVyXHJcbiAgYXZhaWxhYmxlOiBudW1iZXJcclxuICB0b3RhbDogbnVtYmVyXHJcbiAgdW5pdDogc3RyaW5nXHJcbiAgY29uZmxpY3RpbmdCb29raW5nczogQXJyYXk8e1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgZXZlbnRUaXRsZTogc3RyaW5nXHJcbiAgICBzdGFydERhdGU6IHN0cmluZ1xyXG4gICAgZW5kRGF0ZTogc3RyaW5nXHJcbiAgICBxdWFudGl0eTogbnVtYmVyXHJcbiAgfT5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludmVudG9yeVNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIEF0dWFsaXphIG8gZXN0b3F1ZSBxdWFuZG8gdW1hIGxvY2HDp8OjbyDDqSBjcmlhZGFcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgdXBkYXRlSW52ZW50b3J5T25Cb29raW5nQ3JlYXRlKGJvb2tpbmdJZDogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBCdXNjYXIgYSBsb2Nhw6fDo28gY29tIHRvZG9zIG9zIGl0ZW5zXHJcbiAgICAgIGNvbnN0IGJvb2tpbmcgPSBhd2FpdCBwcmlzbWEuYm9va2luZy5maW5kVW5pcXVlKHtcclxuICAgICAgICB3aGVyZTogeyBpZDogYm9va2luZ0lkIH0sXHJcbiAgICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgICAgaXRlbXM6IHRydWUsXHJcbiAgICAgICAgICBhY2Nlc3NvcmllczogdHJ1ZSxcclxuICAgICAgICAgIGVxdWlwbWVudDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIGlmICghYm9va2luZykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTG9jYcOnw6NvIG7Do28gZW5jb250cmFkYScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBzZSBvIHN0YXR1cyBkYSBsb2Nhw6fDo28gZGV2ZSBvY3VwYXIgZXN0b3F1ZVxyXG4gICAgICBjb25zdCBhY3RpdmVTdGF0dXNlcyA9IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXVxyXG4gICAgICBpZiAoIWFjdGl2ZVN0YXR1c2VzLmluY2x1ZGVzKGJvb2tpbmcuc3RhdHVzKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDimqDvuI8gIExvY2HDp8OjbyAke2Jvb2tpbmdJZH0gY29tIHN0YXR1cyAke2Jvb2tpbmcuc3RhdHVzfSBuw6NvIG9jdXBhIGVzdG9xdWVgKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhgQXR1YWxpemFuZG8gZXN0b3F1ZSBwYXJhIGxvY2HDp8OjbyAke2Jvb2tpbmdJZH0gKHN0YXR1czogJHtib29raW5nLnN0YXR1c30pOmAsIHtcclxuICAgICAgICBwcm9kdXRvczogYm9va2luZy5pdGVtcy5sZW5ndGgsXHJcbiAgICAgICAgYWNlc3NvcmlvczogYm9va2luZy5hY2Nlc3Nvcmllcy5sZW5ndGgsXHJcbiAgICAgICAgZXF1aXBhbWVudG9zOiBib29raW5nLmVxdWlwbWVudC5sZW5ndGhcclxuICAgICAgfSlcclxuXHJcbiAgICAgIC8vIEF0dWFsaXphciBlc3RvcXVlIGRlIHByb2R1dG9zIChtZXRyb3MpXHJcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBib29raW5nLml0ZW1zKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubWV0ZXJzID4gMCkge1xyXG4gICAgICAgICAgYXdhaXQgKHByaXNtYSBhcyBhbnkpLnByb2R1Y3QudXBkYXRlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IGl0ZW0ucHJvZHVjdElkIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICBvY2N1cGllZE1ldGVyczoge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50OiBpdGVtLm1ldGVyc1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgIPCfk6YgUHJvZHV0byAke2l0ZW0ucHJvZHVjdElkfTogKyR7aXRlbS5tZXRlcnN9bcKyIG9jdXBhZG9zYClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEF0dWFsaXphciBlc3RvcXVlIGRlIGFjZXNzw7NyaW9zICh1bmlkYWRlcylcclxuICAgICAgZm9yIChjb25zdCBhY2Nlc3Nvcnkgb2YgYm9va2luZy5hY2Nlc3Nvcmllcykge1xyXG4gICAgICAgIGlmIChhY2Nlc3NvcnkucXR5ID4gMCkge1xyXG4gICAgICAgICAgYXdhaXQgKHByaXNtYSBhcyBhbnkpLmFjY2Vzc29yeS51cGRhdGUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogYWNjZXNzb3J5LmFjY2Vzc29yeUlkIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICBvY2N1cGllZFF0eToge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50OiBhY2Nlc3NvcnkucXR5XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYCAg4pqZ77iPIEFjZXNzw7NyaW8gJHthY2Nlc3NvcnkuYWNjZXNzb3J5SWR9OiArJHthY2Nlc3NvcnkucXR5fSB1bmlkYWRlcyBvY3VwYWRhc2ApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBdHVhbGl6YXIgZXN0b3F1ZSBkZSBlcXVpcGFtZW50b3MgKHVuaWRhZGVzKVxyXG4gICAgICBmb3IgKGNvbnN0IGVxdWlwbWVudCBvZiBib29raW5nLmVxdWlwbWVudCkge1xyXG4gICAgICAgIGlmIChlcXVpcG1lbnQucXR5ID4gMCkge1xyXG4gICAgICAgICAgYXdhaXQgKHByaXNtYSBhcyBhbnkpLmVxdWlwbWVudC51cGRhdGUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogZXF1aXBtZW50LmVxdWlwbWVudElkIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICBvY2N1cGllZFF0eToge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50OiBlcXVpcG1lbnQucXR5XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYCAg8J+UpyBFcXVpcGFtZW50byAke2VxdWlwbWVudC5lcXVpcG1lbnRJZH06ICske2VxdWlwbWVudC5xdHl9IHVuaWRhZGVzIG9jdXBhZGFzYClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgRXN0b3F1ZSBhdHVhbGl6YWRvIGNvbSBzdWNlc3NvIHBhcmEgbG9jYcOnw6NvICR7Ym9va2luZ0lkfWApXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJybyBhbyBhdHVhbGl6YXIgZXN0b3F1ZTonLCBlcnJvcilcclxuICAgICAgdGhyb3cgZXJyb3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhIG8gZXN0b3F1ZSBxdWFuZG8gdW1hIGxvY2HDp8OjbyDDqSBleGNsdcOtZGFcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgcmVzdG9yZUludmVudG9yeU9uQm9va2luZ0RlbGV0ZShib29raW5nSWQ6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQnVzY2FyIGEgbG9jYcOnw6NvIGNvbSB0b2RvcyBvcyBpdGVuc1xyXG4gICAgICBjb25zdCBib29raW5nID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgd2hlcmU6IHsgaWQ6IGJvb2tpbmdJZCB9LFxyXG4gICAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICAgIGl0ZW1zOiB0cnVlLFxyXG4gICAgICAgICAgYWNjZXNzb3JpZXM6IHRydWUsXHJcbiAgICAgICAgICBlcXVpcG1lbnQ6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBpZiAoIWJvb2tpbmcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvY2HDp8OjbyBuw6NvIGVuY29udHJhZGEnKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBWZXJpZmljYXIgc2UgbyBzdGF0dXMgZGEgbG9jYcOnw6NvIG9jdXBhdmEgZXN0b3F1ZVxyXG4gICAgICBjb25zdCBhY3RpdmVTdGF0dXNlcyA9IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXVxyXG4gICAgICBpZiAoIWFjdGl2ZVN0YXR1c2VzLmluY2x1ZGVzKGJvb2tpbmcuc3RhdHVzKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDimqDvuI8gIExvY2HDp8OjbyAke2Jvb2tpbmdJZH0gY29tIHN0YXR1cyAke2Jvb2tpbmcuc3RhdHVzfSBuw6NvIG9jdXBhdmEgZXN0b3F1ZWApXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBSZXN0YXVyYW5kbyBlc3RvcXVlIHBhcmEgbG9jYcOnw6NvICR7Ym9va2luZ0lkfSAoc3RhdHVzOiAke2Jvb2tpbmcuc3RhdHVzfSk6YClcclxuXHJcbiAgICAgIC8vIFJlc3RhdXJhciBlc3RvcXVlIGRlIHByb2R1dG9zXHJcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBib29raW5nLml0ZW1zKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubWV0ZXJzID4gMCkge1xyXG4gICAgICAgICAgYXdhaXQgKHByaXNtYSBhcyBhbnkpLnByb2R1Y3QudXBkYXRlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IGl0ZW0ucHJvZHVjdElkIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICBvY2N1cGllZE1ldGVyczoge1xyXG4gICAgICAgICAgICAgICAgZGVjcmVtZW50OiBpdGVtLm1ldGVyc1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgIPCfk6YgUHJvZHV0byAke2l0ZW0ucHJvZHVjdElkfTogLSR7aXRlbS5tZXRlcnN9bcKyIHJlc3RhdXJhZG9zYClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlc3RhdXJhciBlc3RvcXVlIGRlIGFjZXNzw7NyaW9zXHJcbiAgICAgIGZvciAoY29uc3QgYWNjZXNzb3J5IG9mIGJvb2tpbmcuYWNjZXNzb3JpZXMpIHtcclxuICAgICAgICBpZiAoYWNjZXNzb3J5LnF0eSA+IDApIHtcclxuICAgICAgICAgIGF3YWl0IChwcmlzbWEgYXMgYW55KS5hY2Nlc3NvcnkudXBkYXRlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IGFjY2Vzc29yeS5hY2Nlc3NvcnlJZCB9LFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgb2NjdXBpZWRRdHk6IHtcclxuICAgICAgICAgICAgICAgIGRlY3JlbWVudDogYWNjZXNzb3J5LnF0eVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgIOKame+4jyBBY2Vzc8OzcmlvICR7YWNjZXNzb3J5LmFjY2Vzc29yeUlkfTogLSR7YWNjZXNzb3J5LnF0eX0gdW5pZGFkZXMgcmVzdGF1cmFkYXNgKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVzdGF1cmFyIGVzdG9xdWUgZGUgZXF1aXBhbWVudG9zXHJcbiAgICAgIGZvciAoY29uc3QgZXF1aXBtZW50IG9mIGJvb2tpbmcuZXF1aXBtZW50KSB7XHJcbiAgICAgICAgaWYgKGVxdWlwbWVudC5xdHkgPiAwKSB7XHJcbiAgICAgICAgICBhd2FpdCAocHJpc21hIGFzIGFueSkuZXF1aXBtZW50LnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBlcXVpcG1lbnQuZXF1aXBtZW50SWQgfSxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgIG9jY3VwaWVkUXR5OiB7XHJcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQ6IGVxdWlwbWVudC5xdHlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICDwn5SnIEVxdWlwYW1lbnRvICR7ZXF1aXBtZW50LmVxdWlwbWVudElkfTogLSR7ZXF1aXBtZW50LnF0eX0gdW5pZGFkZXMgcmVzdGF1cmFkYXNgKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBFc3RvcXVlIHJlc3RhdXJhZG8gY29tIHN1Y2Vzc28gcGFyYSBsb2Nhw6fDo28gJHtib29raW5nSWR9YClcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIGFvIHJlc3RhdXJhciBlc3RvcXVlOicsIGVycm9yKVxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR1YWxpemEgbyBlc3RvcXVlIHF1YW5kbyB1bWEgbG9jYcOnw6NvIMOpIG1vZGlmaWNhZGFcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgdXBkYXRlSW52ZW50b3J5T25Cb29raW5nTW9kaWZ5KFxyXG4gICAgYm9va2luZ0lkOiBzdHJpbmcsXHJcbiAgICBvbGRJdGVtczogYW55W10sXHJcbiAgICBuZXdJdGVtczogYW55W11cclxuICApIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFByaW1laXJvLCByZXN0YXVyYXIgbyBlc3RvcXVlIGFudGlnb1xyXG4gICAgICBhd2FpdCB0aGlzLnJlc3RvcmVJbnZlbnRvcnlPbkJvb2tpbmdEZWxldGUoYm9va2luZ0lkKVxyXG4gICAgICBcclxuICAgICAgLy8gRGVwb2lzLCBhcGxpY2FyIG8gbm92byBlc3RvcXVlXHJcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlSW52ZW50b3J5T25Cb29raW5nQ3JlYXRlKGJvb2tpbmdJZClcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBFc3RvcXVlIGF0dWFsaXphZG8gcGFyYSBtb2RpZmljYcOnw6NvIGRhIGxvY2HDp8OjbyAke2Jvb2tpbmdJZH1gKVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJybyBhbyBhdHVhbGl6YXIgZXN0b3F1ZSBuYSBtb2RpZmljYcOnw6NvOicsIGVycm9yKVxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmVyaWZpY2EgZSBhdHVhbGl6YSBlc3RvcXVlIGRlIGxvY2HDp8O1ZXMgZXhwaXJhZGFzXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGNoZWNrRXhwaXJlZEJvb2tpbmdzKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxyXG4gICAgICBcclxuICAgICAgLy8gQnVzY2FyIGxvY2HDp8O1ZXMgZXhwaXJhZGFzIChlbmREYXRlIDwgbm93KSBjb20gc3RhdHVzIGF0aXZvXHJcbiAgICAgIGNvbnN0IGV4cGlyZWRCb29raW5ncyA9IGF3YWl0IHByaXNtYS5ib29raW5nLmZpbmRNYW55KHtcclxuICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgZW5kRGF0ZToge1xyXG4gICAgICAgICAgICBsdDogbm93XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3RhdHVzOiB7XHJcbiAgICAgICAgICAgIGluOiBbJ0NPTkZJUk1FRCcsICdQRU5ESU5HJywgJ0lOX1BST0dSRVNTJ11cclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGU6IHtcclxuICAgICAgICAgIGl0ZW1zOiB0cnVlLFxyXG4gICAgICAgICAgYWNjZXNzb3JpZXM6IHRydWUsXHJcbiAgICAgICAgICBlcXVpcG1lbnQ6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhgRW5jb250cmFkYXMgJHtleHBpcmVkQm9va2luZ3MubGVuZ3RofSBsb2Nhw6fDtWVzIGV4cGlyYWRhc2ApXHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGJvb2tpbmcgb2YgZXhwaXJlZEJvb2tpbmdzKSB7XHJcbiAgICAgICAgLy8gTWFyY2FyIGNvbW8gQ09NUExFVEVEXHJcbiAgICAgICAgYXdhaXQgcHJpc21hLmJvb2tpbmcudXBkYXRlKHtcclxuICAgICAgICAgIHdoZXJlOiB7IGlkOiBib29raW5nLmlkIH0sXHJcbiAgICAgICAgICBkYXRhOiB7IHN0YXR1czogJ0NPTVBMRVRFRCcgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIFJlc3RhdXJhciBlc3RvcXVlXHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZXN0b3JlSW52ZW50b3J5T25Cb29raW5nRGVsZXRlKGJvb2tpbmcuaWQpXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coYExvY2HDp8OjbyAke2Jvb2tpbmcuaWR9IG1hcmNhZGEgY29tbyBleHBpcmFkYSBlIGVzdG9xdWUgcmVzdGF1cmFkb2ApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBleHBpcmVkQm9va2luZ3MubGVuZ3RoXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvIGFvIHZlcmlmaWNhciBsb2Nhw6fDtWVzIGV4cGlyYWRhczonLCBlcnJvcilcclxuICAgICAgdGhyb3cgZXJyb3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvcnJpZ2UgZXN0b3F1ZSBkZSBsb2Nhw6fDtWVzIGNvbSBzdGF0dXMgaW5jb3JyZXRvXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGZpeEludmVudG9yeVN0YXR1cygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SnIENvcnJpZ2luZG8gc3RhdHVzIGRvIGVzdG9xdWUuLi4nKVxyXG4gICAgICBcclxuICAgICAgLy8gQnVzY2FyIHRvZGFzIGFzIGxvY2HDp8O1ZXNcclxuICAgICAgY29uc3QgYWxsQm9va2luZ3MgPSBhd2FpdCBwcmlzbWEuYm9va2luZy5maW5kTWFueSh7XHJcbiAgICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgICAgaXRlbXM6IHRydWUsXHJcbiAgICAgICAgICBhY2Nlc3NvcmllczogdHJ1ZSxcclxuICAgICAgICAgIGVxdWlwbWVudDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIGxldCBmaXhlZENvdW50ID0gMFxyXG4gICAgICBjb25zdCBhY3RpdmVTdGF0dXNlcyA9IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXVxyXG5cclxuICAgICAgZm9yIChjb25zdCBib29raW5nIG9mIGFsbEJvb2tpbmdzKSB7XHJcbiAgICAgICAgY29uc3Qgc2hvdWxkT2NjdXB5U3RvY2sgPSBhY3RpdmVTdGF0dXNlcy5pbmNsdWRlcyhib29raW5nLnN0YXR1cylcclxuICAgICAgICBsZXQgbmVlZHNGaXggPSBmYWxzZVxyXG5cclxuICAgICAgICAvLyBWZXJpZmljYXIgcHJvZHV0b3NcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYm9va2luZy5pdGVtcykge1xyXG4gICAgICAgICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IHByaXNtYS5wcm9kdWN0LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogaXRlbS5wcm9kdWN0SWQgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICBpZiAocHJvZHVjdCkge1xyXG4gICAgICAgICAgICAgY29uc3QgY3VycmVudE9jY3VwaWVkID0gKHByb2R1Y3QgYXMgYW55KS5vY2N1cGllZE1ldGVycyB8fCAwXHJcbiAgICAgICAgICAgICBjb25zdCBleHBlY3RlZE9jY3VwaWVkID0gc2hvdWxkT2NjdXB5U3RvY2sgPyBpdGVtLm1ldGVycyA6IDBcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgaWYgKGN1cnJlbnRPY2N1cGllZCAhPT0gZXhwZWN0ZWRPY2N1cGllZCkge1xyXG4gICAgICAgICAgICAgICBuZWVkc0ZpeCA9IHRydWVcclxuICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAg8J+TpiBQcm9kdXRvICR7cHJvZHVjdC5uYW1lfTogb2N1cGFkbz0ke2N1cnJlbnRPY2N1cGllZH0sIGVzcGVyYWRvPSR7ZXhwZWN0ZWRPY2N1cGllZH1gKVxyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZlcmlmaWNhciBhY2Vzc8Ozcmlvc1xyXG4gICAgICAgIGZvciAoY29uc3QgYWNjZXNzb3J5IG9mIGJvb2tpbmcuYWNjZXNzb3JpZXMpIHtcclxuICAgICAgICAgIGNvbnN0IGFjYyA9IGF3YWl0IHByaXNtYS5hY2Nlc3NvcnkuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBhY2Nlc3NvcnkuYWNjZXNzb3J5SWQgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGFjYykge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50T2NjdXBpZWQgPSBhY2Mub2NjdXBpZWRRdHkgfHwgMFxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZE9jY3VwaWVkID0gc2hvdWxkT2NjdXB5U3RvY2sgPyBhY2Nlc3NvcnkucXR5IDogMFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRPY2N1cGllZCAhPT0gZXhwZWN0ZWRPY2N1cGllZCkge1xyXG4gICAgICAgICAgICAgIG5lZWRzRml4ID0gdHJ1ZVxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIOKame+4jyBBY2Vzc8OzcmlvICR7YWNjLm5hbWV9OiBvY3VwYWRvPSR7Y3VycmVudE9jY3VwaWVkfSwgZXNwZXJhZG89JHtleHBlY3RlZE9jY3VwaWVkfWApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZlcmlmaWNhciBlcXVpcGFtZW50b3NcclxuICAgICAgICBmb3IgKGNvbnN0IGVxdWlwIG9mIGJvb2tpbmcuZXF1aXBtZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBlcSA9IGF3YWl0IHByaXNtYS5lcXVpcG1lbnQuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBlcXVpcC5lcXVpcG1lbnRJZCB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoZXEpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudE9jY3VwaWVkID0gZXEub2NjdXBpZWRRdHkgfHwgMFxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZE9jY3VwaWVkID0gc2hvdWxkT2NjdXB5U3RvY2sgPyBlcXVpcC5xdHkgOiAwXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoY3VycmVudE9jY3VwaWVkICE9PSBleHBlY3RlZE9jY3VwaWVkKSB7XHJcbiAgICAgICAgICAgICAgbmVlZHNGaXggPSB0cnVlXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAg8J+UpyBFcXVpcGFtZW50byAke2VxLm5hbWV9OiBvY3VwYWRvPSR7Y3VycmVudE9jY3VwaWVkfSwgZXNwZXJhZG89JHtleHBlY3RlZE9jY3VwaWVkfWApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZWVkc0ZpeCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCAg8J+UhCBDb3JyaWdpbmRvIGxvY2HDp8OjbyAke2Jvb2tpbmcuaWR9ICgke2Jvb2tpbmcuZXZlbnRUaXRsZX0pYClcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gUmVzdGF1cmFyIGVzdG9xdWUgYXR1YWxcclxuICAgICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZUludmVudG9yeU9uQm9va2luZ0RlbGV0ZShib29raW5nLmlkKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBBcGxpY2FyIGVzdG9xdWUgY29ycmV0byBzZSBuZWNlc3PDoXJpb1xyXG4gICAgICAgICAgaWYgKHNob3VsZE9jY3VweVN0b2NrKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlSW52ZW50b3J5T25Cb29raW5nQ3JlYXRlKGJvb2tpbmcuaWQpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZpeGVkQ291bnQrK1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBDb3JyZcOnw6NvIGNvbmNsdcOtZGE6ICR7Zml4ZWRDb3VudH0gbG9jYcOnw7VlcyBjb3JyaWdpZGFzYClcclxuICAgICAgcmV0dXJuIGZpeGVkQ291bnRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIGFvIGNvcnJpZ2lyIGVzdG9xdWU6JywgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGEgZGlzcG9uaWJpbGlkYWRlIGRlIGVzdG9xdWUgcGFyYSB1bSBwZXLDrW9kbyBlc3BlY8OtZmljb1xyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyB2YWxpZGF0ZUF2YWlsYWJpbGl0eUZvclBlcmlvZChcclxuICAgIHN0YXJ0RGF0ZTogRGF0ZSxcclxuICAgIGVuZERhdGU6IERhdGUsXHJcbiAgICBwcm9kdWN0czogQXJyYXk8eyBwcm9kdWN0SWQ6IHN0cmluZzsgbWV0ZXJzOiBudW1iZXIgfT4sXHJcbiAgICBhY2Nlc3NvcmllczogQXJyYXk8eyBhY2Nlc3NvcnlJZDogc3RyaW5nOyBxdHk6IG51bWJlciB9PixcclxuICAgIGVxdWlwbWVudDogQXJyYXk8eyBlcXVpcG1lbnRJZDogc3RyaW5nOyBxdHk6IG51bWJlciB9PixcclxuICAgIGV4Y2x1ZGVCb29raW5nSWQ/OiBzdHJpbmcgLy8gUGFyYSBlZGnDp8OjbyBkZSBsb2Nhw6fDtWVzIGV4aXN0ZW50ZXNcclxuICApOiBQcm9taXNlPHtcclxuICAgIGF2YWlsYWJsZTogYm9vbGVhblxyXG4gICAgY29uZmxpY3RzOiBCb29raW5nQ29uZmxpY3RbXVxyXG4gICAgcGVyaW9kQXZhaWxhYmlsaXR5OiB7XHJcbiAgICAgIHN0YXJ0RGF0ZTogc3RyaW5nXHJcbiAgICAgIGVuZERhdGU6IHN0cmluZ1xyXG4gICAgICB0b3RhbEJvb2tpbmdzOiBudW1iZXJcclxuICAgICAgdG90YWxDb25mbGljdHM6IG51bWJlclxyXG4gICAgfVxyXG4gIH0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFZhbGlkYW5kbyBkaXNwb25pYmlsaWRhZGUgcGFyYSBwZXLDrW9kbzonLCB7XHJcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUudG9JU09TdHJpbmcoKSxcclxuICAgICAgICBlbmREYXRlOiBlbmREYXRlLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgcHJvZHV0b3M6IHByb2R1Y3RzLmxlbmd0aCxcclxuICAgICAgICBhY2Vzc29yaW9zOiBhY2Nlc3Nvcmllcy5sZW5ndGgsXHJcbiAgICAgICAgZXF1aXBhbWVudG9zOiBlcXVpcG1lbnQubGVuZ3RoXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBjb25zdCBjb25mbGljdHM6IEJvb2tpbmdDb25mbGljdFtdID0gW11cclxuICAgICAgbGV0IHRvdGFsQm9va2luZ3MgPSAwXHJcbiAgICAgIGxldCB0b3RhbENvbmZsaWN0cyA9IDBcclxuXHJcbiAgICAgIC8vIDEuIFZhbGlkYXIgcHJvZHV0b3MgKG1ldHJvcylcclxuICAgICAgZm9yIChjb25zdCBwcm9kdWN0IG9mIHByb2R1Y3RzKSB7XHJcbiAgICAgICAgaWYgKHByb2R1Y3QubWV0ZXJzID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgcHJvZHVjdEluZm8gPSBhd2FpdCBwcmlzbWEucHJvZHVjdC5maW5kVW5pcXVlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHByb2R1Y3QucHJvZHVjdElkIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgaWYgKHByb2R1Y3RJbmZvKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmZsaWN0ID0gYXdhaXQgdGhpcy5jaGVja1Byb2R1Y3RBdmFpbGFiaWxpdHkoXHJcbiAgICAgICAgICAgICAgcHJvZHVjdEluZm8sXHJcbiAgICAgICAgICAgICAgcHJvZHVjdC5tZXRlcnMsXHJcbiAgICAgICAgICAgICAgc3RhcnREYXRlLFxyXG4gICAgICAgICAgICAgIGVuZERhdGUsXHJcbiAgICAgICAgICAgICAgZXhjbHVkZUJvb2tpbmdJZFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcclxuICAgICAgICAgICAgICBjb25mbGljdHMucHVzaChjb25mbGljdClcclxuICAgICAgICAgICAgICB0b3RhbENvbmZsaWN0cysrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDIuIFZhbGlkYXIgYWNlc3PDs3Jpb3MgKHVuaWRhZGVzKVxyXG4gICAgICBmb3IgKGNvbnN0IGFjY2Vzc29yeSBvZiBhY2Nlc3Nvcmllcykge1xyXG4gICAgICAgIGlmIChhY2Nlc3NvcnkucXR5ID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgYWNjZXNzb3J5SW5mbyA9IGF3YWl0IHByaXNtYS5hY2Nlc3NvcnkuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBhY2Nlc3NvcnkuYWNjZXNzb3J5SWQgfVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICBpZiAoYWNjZXNzb3J5SW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBjb25mbGljdCA9IGF3YWl0IHRoaXMuY2hlY2tBY2Nlc3NvcnlBdmFpbGFiaWxpdHkoXHJcbiAgICAgICAgICAgICAgYWNjZXNzb3J5SW5mbyxcclxuICAgICAgICAgICAgICBhY2Nlc3NvcnkucXR5LFxyXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgICBlbmREYXRlLFxyXG4gICAgICAgICAgICAgIGV4Y2x1ZGVCb29raW5nSWRcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbmZsaWN0KSB7XHJcbiAgICAgICAgICAgICAgY29uZmxpY3RzLnB1c2goY29uZmxpY3QpXHJcbiAgICAgICAgICAgICAgdG90YWxDb25mbGljdHMrK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAzLiBWYWxpZGFyIGVxdWlwYW1lbnRvcyAodW5pZGFkZXMpXHJcbiAgICAgIGZvciAoY29uc3QgZXF1aXAgb2YgZXF1aXBtZW50KSB7XHJcbiAgICAgICAgaWYgKGVxdWlwLnF0eSA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGVxdWlwbWVudEluZm8gPSBhd2FpdCBwcmlzbWEuZXF1aXBtZW50LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogZXF1aXAuZXF1aXBtZW50SWQgfVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICBpZiAoZXF1aXBtZW50SW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBjb25mbGljdCA9IGF3YWl0IHRoaXMuY2hlY2tFcXVpcG1lbnRBdmFpbGFiaWxpdHkoXHJcbiAgICAgICAgICAgICAgZXF1aXBtZW50SW5mbyxcclxuICAgICAgICAgICAgICBlcXVpcC5xdHksXHJcbiAgICAgICAgICAgICAgc3RhcnREYXRlLFxyXG4gICAgICAgICAgICAgIGVuZERhdGUsXHJcbiAgICAgICAgICAgICAgZXhjbHVkZUJvb2tpbmdJZFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcclxuICAgICAgICAgICAgICBjb25mbGljdHMucHVzaChjb25mbGljdClcclxuICAgICAgICAgICAgICB0b3RhbENvbmZsaWN0cysrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDQuIENvbnRhciB0b3RhbCBkZSBsb2Nhw6fDtWVzIG5vIHBlcsOtb2RvXHJcbiAgICAgIHRvdGFsQm9va2luZ3MgPSBhd2FpdCB0aGlzLmNvdW50Qm9va2luZ3NJblBlcmlvZChzdGFydERhdGUsIGVuZERhdGUsIGV4Y2x1ZGVCb29raW5nSWQpXHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgYXZhaWxhYmxlOiBjb25mbGljdHMubGVuZ3RoID09PSAwLFxyXG4gICAgICAgIGNvbmZsaWN0cyxcclxuICAgICAgICBwZXJpb2RBdmFpbGFiaWxpdHk6IHtcclxuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgICB0b3RhbEJvb2tpbmdzLFxyXG4gICAgICAgICAgdG90YWxDb25mbGljdHM6IGNvbmZsaWN0cy5sZW5ndGhcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgVmFsaWRhw6fDo28gY29uY2x1w61kYTogJHtjb25mbGljdHMubGVuZ3RoID09PSAwID8gJ0VzdG9xdWUgc3VmaWNpZW50ZScgOiBgJHtjb25mbGljdHMubGVuZ3RofSBjb25mbGl0b3MgZW5jb250cmFkb3NgfWApXHJcbiAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIGFvIHZhbGlkYXIgZGlzcG9uaWJpbGlkYWRlIHBhcmEgcGVyw61vZG86JywgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZmljYSBkaXNwb25pYmlsaWRhZGUgZGUgdW0gcHJvZHV0byBlc3BlY8OtZmljbyBwYXJhIHVtIHBlcsOtb2RvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY2hlY2tQcm9kdWN0QXZhaWxhYmlsaXR5KFxyXG4gICAgcHJvZHVjdDogYW55LFxyXG4gICAgcmVxdWVzdGVkTWV0ZXJzOiBudW1iZXIsXHJcbiAgICBzdGFydERhdGU6IERhdGUsXHJcbiAgICBlbmREYXRlOiBEYXRlLFxyXG4gICAgZXhjbHVkZUJvb2tpbmdJZD86IHN0cmluZ1xyXG4gICk6IFByb21pc2U8Qm9va2luZ0NvbmZsaWN0IHwgbnVsbD4ge1xyXG4gICAgLy8gQnVzY2FyIHRvZGFzIGFzIGxvY2HDp8O1ZXMgYXRpdmFzIHF1ZSBzb2JyZXDDtWVtIG8gcGVyw61vZG9cclxuICAgIGNvbnN0IG92ZXJsYXBwaW5nQm9va2luZ3MgPSBhd2FpdCBwcmlzbWEuYm9va2luZy5maW5kTWFueSh7XHJcbiAgICAgIHdoZXJlOiB7XHJcbiAgICAgICAgQU5EOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIE9SOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlOiB7IGx0ZTogZW5kRGF0ZSB9LFxyXG4gICAgICAgICAgICAgICAgZW5kRGF0ZTogeyBndGU6IHN0YXJ0RGF0ZSB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzdGF0dXM6IHsgaW46IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXSB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZXhjbHVkZUJvb2tpbmdJZCA/IHsgaWQ6IHsgbm90OiBleGNsdWRlQm9va2luZ0lkIH0gfSA6IHt9XHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBpbmNsdWRlOiB7XHJcbiAgICAgICAgaXRlbXM6IHtcclxuICAgICAgICAgIHdoZXJlOiB7IHByb2R1Y3RJZDogcHJvZHVjdC5pZCB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8vIENhbGN1bGFyIG1ldHJvcyBvY3VwYWRvcyBubyBwZXLDrW9kb1xyXG4gICAgbGV0IG9jY3VwaWVkTWV0ZXJzID0gMFxyXG4gICAgY29uc3QgY29uZmxpY3RpbmdCb29raW5nczogYW55W10gPSBbXVxyXG5cclxuICAgIGZvciAoY29uc3QgYm9va2luZyBvZiBvdmVybGFwcGluZ0Jvb2tpbmdzKSB7XHJcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBib29raW5nLml0ZW1zKSB7XHJcbiAgICAgICAgb2NjdXBpZWRNZXRlcnMgKz0gaXRlbS5tZXRlcnNcclxuICAgICAgICBjb25mbGljdGluZ0Jvb2tpbmdzLnB1c2goe1xyXG4gICAgICAgICAgaWQ6IGJvb2tpbmcuaWQsXHJcbiAgICAgICAgICBldmVudFRpdGxlOiBib29raW5nLmV2ZW50VGl0bGUsXHJcbiAgICAgICAgICBzdGFydERhdGU6IGJvb2tpbmcuc3RhcnREYXRlLFxyXG4gICAgICAgICAgZW5kRGF0ZTogYm9va2luZy5lbmREYXRlLFxyXG4gICAgICAgICAgcXVhbnRpdHk6IGl0ZW0ubWV0ZXJzXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF2YWlsYWJsZU1ldGVycyA9IHByb2R1Y3QudG90YWxNZXRlcnMgLSBvY2N1cGllZE1ldGVyc1xyXG5cclxuICAgIGlmIChhdmFpbGFibGVNZXRlcnMgPCByZXF1ZXN0ZWRNZXRlcnMpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogcHJvZHVjdC5pZCxcclxuICAgICAgICB0eXBlOiAnUFJPRFVUTycsXHJcbiAgICAgICAgbmFtZTogcHJvZHVjdC5uYW1lLFxyXG4gICAgICAgIHJlcXVlc3RlZDogcmVxdWVzdGVkTWV0ZXJzLFxyXG4gICAgICAgIGF2YWlsYWJsZTogYXZhaWxhYmxlTWV0ZXJzLFxyXG4gICAgICAgIHRvdGFsOiBwcm9kdWN0LnRvdGFsTWV0ZXJzLFxyXG4gICAgICAgIHVuaXQ6ICdtwrInLFxyXG4gICAgICAgIGNvbmZsaWN0aW5nQm9va2luZ3NcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZmljYSBkaXNwb25pYmlsaWRhZGUgZGUgdW0gYWNlc3PDs3JpbyBlc3BlY8OtZmljbyBwYXJhIHVtIHBlcsOtb2RvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY2hlY2tBY2Nlc3NvcnlBdmFpbGFiaWxpdHkoXHJcbiAgICBhY2Nlc3Nvcnk6IGFueSxcclxuICAgIHJlcXVlc3RlZFF0eTogbnVtYmVyLFxyXG4gICAgc3RhcnREYXRlOiBEYXRlLFxyXG4gICAgZW5kRGF0ZTogRGF0ZSxcclxuICAgIGV4Y2x1ZGVCb29raW5nSWQ/OiBzdHJpbmdcclxuICApOiBQcm9taXNlPEJvb2tpbmdDb25mbGljdCB8IG51bGw+IHtcclxuICAgIC8vIEJ1c2NhciB0b2RhcyBhcyBsb2Nhw6fDtWVzIGF0aXZhcyBxdWUgc29icmVww7VlbSBvIHBlcsOtb2RvXHJcbiAgICBjb25zdCBvdmVybGFwcGluZ0Jvb2tpbmdzID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIEFORDogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBPUjogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogeyBsdGU6IGVuZERhdGUgfSxcclxuICAgICAgICAgICAgICAgIGVuZERhdGU6IHsgZ3RlOiBzdGFydERhdGUgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgc3RhdHVzOiB7IGluOiBbJ0NPTkZJUk1FRCcsICdQRU5ESU5HJywgJ0lOX1BST0dSRVNTJ10gfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGV4Y2x1ZGVCb29raW5nSWQgPyB7IGlkOiB7IG5vdDogZXhjbHVkZUJvb2tpbmdJZCB9IH0gOiB7fVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgIGFjY2Vzc29yaWVzOiB7XHJcbiAgICAgICAgICB3aGVyZTogeyBhY2Nlc3NvcnlJZDogYWNjZXNzb3J5LmlkIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLy8gQ2FsY3VsYXIgdW5pZGFkZXMgb2N1cGFkYXMgbm8gcGVyw61vZG9cclxuICAgIGxldCBvY2N1cGllZFF0eSA9IDBcclxuICAgIGNvbnN0IGNvbmZsaWN0aW5nQm9va2luZ3M6IGFueVtdID0gW11cclxuXHJcbiAgICBmb3IgKGNvbnN0IGJvb2tpbmcgb2Ygb3ZlcmxhcHBpbmdCb29raW5ncykge1xyXG4gICAgICBmb3IgKGNvbnN0IGFjYyBvZiBib29raW5nLmFjY2Vzc29yaWVzKSB7XHJcbiAgICAgICAgb2NjdXBpZWRRdHkgKz0gYWNjLnF0eVxyXG4gICAgICAgIGNvbmZsaWN0aW5nQm9va2luZ3MucHVzaCh7XHJcbiAgICAgICAgICBpZDogYm9va2luZy5pZCxcclxuICAgICAgICAgIGV2ZW50VGl0bGU6IGJvb2tpbmcuZXZlbnRUaXRsZSxcclxuICAgICAgICAgIHN0YXJ0RGF0ZTogYm9va2luZy5zdGFydERhdGUsXHJcbiAgICAgICAgICBlbmREYXRlOiBib29raW5nLmVuZERhdGUsXHJcbiAgICAgICAgICBxdWFudGl0eTogYWNjLnF0eVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhdmFpbGFibGVRdHkgPSBhY2Nlc3NvcnkudG90YWxRdHkgLSBvY2N1cGllZFF0eVxyXG5cclxuICAgIGlmIChhdmFpbGFibGVRdHkgPCByZXF1ZXN0ZWRRdHkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogYWNjZXNzb3J5LmlkLFxyXG4gICAgICAgIHR5cGU6ICdBQ0VTU8OTUklPJyxcclxuICAgICAgICBuYW1lOiBhY2Nlc3NvcnkubmFtZSxcclxuICAgICAgICByZXF1ZXN0ZWQ6IHJlcXVlc3RlZFF0eSxcclxuICAgICAgICBhdmFpbGFibGU6IGF2YWlsYWJsZVF0eSxcclxuICAgICAgICB0b3RhbDogYWNjZXNzb3J5LnRvdGFsUXR5LFxyXG4gICAgICAgIHVuaXQ6ICd1bicsXHJcbiAgICAgICAgY29uZmxpY3RpbmdCb29raW5nc1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmaWNhIGRpc3BvbmliaWxpZGFkZSBkZSB1bSBlcXVpcGFtZW50byBlc3BlY8OtZmljbyBwYXJhIHVtIHBlcsOtb2RvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY2hlY2tFcXVpcG1lbnRBdmFpbGFiaWxpdHkoXHJcbiAgICBlcXVpcG1lbnQ6IGFueSxcclxuICAgIHJlcXVlc3RlZFF0eTogbnVtYmVyLFxyXG4gICAgc3RhcnREYXRlOiBEYXRlLFxyXG4gICAgZW5kRGF0ZTogRGF0ZSxcclxuICAgIGV4Y2x1ZGVCb29raW5nSWQ/OiBzdHJpbmdcclxuICApOiBQcm9taXNlPEJvb2tpbmdDb25mbGljdCB8IG51bGw+IHtcclxuICAgIC8vIEJ1c2NhciB0b2RhcyBhcyBsb2Nhw6fDtWVzIGF0aXZhcyBxdWUgc29icmVww7VlbSBvIHBlcsOtb2RvXHJcbiAgICBjb25zdCBvdmVybGFwcGluZ0Jvb2tpbmdzID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIEFORDogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBPUjogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogeyBsdGU6IGVuZERhdGUgfSxcclxuICAgICAgICAgICAgICAgIGVuZERhdGU6IHsgZ3RlOiBzdGFydERhdGUgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgc3RhdHVzOiB7IGluOiBbJ0NPTkZJUk1FRCcsICdQRU5ESU5HJywgJ0lOX1BST0dSRVNTJ10gfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGV4Y2x1ZGVCb29raW5nSWQgPyB7IGlkOiB7IG5vdDogZXhjbHVkZUJvb2tpbmdJZCB9IH0gOiB7fVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgIGVxdWlwbWVudDoge1xyXG4gICAgICAgICAgd2hlcmU6IHsgZXF1aXBtZW50SWQ6IGVxdWlwbWVudC5pZCB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8vIENhbGN1bGFyIHVuaWRhZGVzIG9jdXBhZGFzIG5vIHBlcsOtb2RvXHJcbiAgICBsZXQgb2NjdXBpZWRRdHkgPSAwXHJcbiAgICBjb25zdCBjb25mbGljdGluZ0Jvb2tpbmdzOiBhbnlbXSA9IFtdXHJcblxyXG4gICAgZm9yIChjb25zdCBib29raW5nIG9mIG92ZXJsYXBwaW5nQm9va2luZ3MpIHtcclxuICAgICAgZm9yIChjb25zdCBlcXVpcCBvZiBib29raW5nLmVxdWlwbWVudCkge1xyXG4gICAgICAgIG9jY3VwaWVkUXR5ICs9IGVxdWlwLnF0eVxyXG4gICAgICAgIGNvbmZsaWN0aW5nQm9va2luZ3MucHVzaCh7XHJcbiAgICAgICAgICBpZDogYm9va2luZy5pZCxcclxuICAgICAgICAgIGV2ZW50VGl0bGU6IGJvb2tpbmcuZXZlbnRUaXRsZSxcclxuICAgICAgICAgIHN0YXJ0RGF0ZTogYm9va2luZy5zdGFydERhdGUsXHJcbiAgICAgICAgICBlbmREYXRlOiBib29raW5nLmVuZERhdGUsXHJcbiAgICAgICAgICBxdWFudGl0eTogZXF1aXAucXR5XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF2YWlsYWJsZVF0eSA9IGVxdWlwbWVudC50b3RhbFF0eSAtIG9jY3VwaWVkUXR5XHJcblxyXG4gICAgaWYgKGF2YWlsYWJsZVF0eSA8IHJlcXVlc3RlZFF0eSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBlcXVpcG1lbnQuaWQsXHJcbiAgICAgICAgdHlwZTogJ0VRVUlQQU1FTlRPJyxcclxuICAgICAgICBuYW1lOiBlcXVpcG1lbnQubmFtZSxcclxuICAgICAgICByZXF1ZXN0ZWQ6IHJlcXVlc3RlZFF0eSxcclxuICAgICAgICBhdmFpbGFibGU6IGF2YWlsYWJsZVF0eSxcclxuICAgICAgICB0b3RhbDogZXF1aXBtZW50LnRvdGFsUXR5LFxyXG4gICAgICAgIHVuaXQ6ICd1bicsXHJcbiAgICAgICAgY29uZmxpY3RpbmdCb29raW5nc1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRhIG8gdG90YWwgZGUgbG9jYcOnw7VlcyBhdGl2YXMgZW0gdW0gcGVyw61vZG9cclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBjb3VudEJvb2tpbmdzSW5QZXJpb2QoXHJcbiAgICBzdGFydERhdGU6IERhdGUsXHJcbiAgICBlbmREYXRlOiBEYXRlLFxyXG4gICAgZXhjbHVkZUJvb2tpbmdJZD86IHN0cmluZ1xyXG4gICk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHByaXNtYS5ib29raW5nLmNvdW50KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBBTkQ6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgT1I6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGFydERhdGU6IHsgbHRlOiBlbmREYXRlIH0sXHJcbiAgICAgICAgICAgICAgICBlbmREYXRlOiB7IGd0ZTogc3RhcnREYXRlIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0YXR1czogeyBpbjogWydDT05GSVJNRUQnLCAnUEVORElORycsICdJTl9QUk9HUkVTUyddIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBleGNsdWRlQm9va2luZ0lkID8geyBpZDogeyBub3Q6IGV4Y2x1ZGVCb29raW5nSWQgfSB9IDoge31cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIGNvdW50XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnTDqW0gbyBzdGF0dXMgYXR1YWwgZG8gZXN0b3F1ZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBnZXRJbnZlbnRvcnlTdGF0dXMoKTogUHJvbWlzZTx7XHJcbiAgICBwcm9kdWN0czogKEludmVudG9yeUl0ZW0gJiB7IG5hbWU6IHN0cmluZyB9KVtdXHJcbiAgICBhY2Nlc3NvcmllczogKEludmVudG9yeUl0ZW0gJiB7IG5hbWU6IHN0cmluZyB9KVtdXHJcbiAgICBlcXVpcG1lbnQ6IChJbnZlbnRvcnlJdGVtICYgeyBuYW1lOiBzdHJpbmcgfSlbXVxyXG4gIH0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHByb2R1Y3RzID0gYXdhaXQgcHJpc21hLnByb2R1Y3QuZmluZE1hbnkoe1xyXG4gICAgICAgIHNlbGVjdDoge1xyXG4gICAgICAgICAgaWQ6IHRydWUsXHJcbiAgICAgICAgICBuYW1lOiB0cnVlLFxyXG4gICAgICAgICAgdG90YWxNZXRlcnM6IHRydWUsXHJcbiAgICAgICAgICBvY2N1cGllZE1ldGVyczogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIGNvbnN0IGFjY2Vzc29yaWVzID0gYXdhaXQgcHJpc21hLmFjY2Vzc29yeS5maW5kTWFueSh7XHJcbiAgICAgICAgc2VsZWN0OiB7XHJcbiAgICAgICAgICBpZDogdHJ1ZSxcclxuICAgICAgICAgIG5hbWU6IHRydWUsXHJcbiAgICAgICAgICB0b3RhbFF0eTogdHJ1ZSxcclxuICAgICAgICAgIG9jY3VwaWVkUXR5OiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc3QgZXF1aXBtZW50ID0gYXdhaXQgcHJpc21hLmVxdWlwbWVudC5maW5kTWFueSh7XHJcbiAgICAgICAgc2VsZWN0OiB7XHJcbiAgICAgICAgICBpZDogdHJ1ZSxcclxuICAgICAgICAgIG5hbWU6IHRydWUsXHJcbiAgICAgICAgICB0b3RhbFF0eTogdHJ1ZSxcclxuICAgICAgICAgIG9jY3VwaWVkUXR5OiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwcm9kdWN0czogcHJvZHVjdHMubWFwKHAgPT4gKHtcclxuICAgICAgICAgIGlkOiBwLmlkLFxyXG4gICAgICAgICAgbmFtZTogcC5uYW1lLFxyXG4gICAgICAgICAgdHlwZTogJ1BST0RVVE8nIGFzIGNvbnN0LFxyXG4gICAgICAgICAgdG90YWxRdWFudGl0eTogcC50b3RhbE1ldGVycyxcclxuICAgICAgICAgIG9jY3VwaWVkUXVhbnRpdHk6IHAub2NjdXBpZWRNZXRlcnMsXHJcbiAgICAgICAgICBhdmFpbGFibGVRdWFudGl0eTogcC50b3RhbE1ldGVycyAtIHAub2NjdXBpZWRNZXRlcnNcclxuICAgICAgICB9KSksXHJcbiAgICAgICAgYWNjZXNzb3JpZXM6IGFjY2Vzc29yaWVzLm1hcChhID0+ICh7XHJcbiAgICAgICAgICBpZDogYS5pZCxcclxuICAgICAgICAgIG5hbWU6IGEubmFtZSxcclxuICAgICAgICAgIHR5cGU6ICdBQ0VTU8OTUklPJyBhcyBjb25zdCxcclxuICAgICAgICAgIHRvdGFsUXVhbnRpdHk6IGEudG90YWxRdHksXHJcbiAgICAgICAgICBvY2N1cGllZFF1YW50aXR5OiBhLm9jY3VwaWVkUXR5LFxyXG4gICAgICAgICAgYXZhaWxhYmxlUXVhbnRpdHk6IGEudG90YWxRdHkgLSBhLm9jY3VwaWVkUXR5XHJcbiAgICAgICAgfSkpLFxyXG4gICAgICAgIGVxdWlwbWVudDogZXF1aXBtZW50Lm1hcChlID0+ICh7XHJcbiAgICAgICAgICBpZDogZS5pZCxcclxuICAgICAgICAgIG5hbWU6IGUubmFtZSxcclxuICAgICAgICAgIHR5cGU6ICdFUVVJUEFNRU5UTycgYXMgY29uc3QsXHJcbiAgICAgICAgICB0b3RhbFF1YW50aXR5OiBlLnRvdGFsUXR5LFxyXG4gICAgICAgICAgb2NjdXBpZWRRdWFudGl0eTogZS5vY2N1cGllZFF0eSxcclxuICAgICAgICAgIGF2YWlsYWJsZVF1YW50aXR5OiBlLnRvdGFsUXR5IC0gZS5vY2N1cGllZFF0eVxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvIGFvIG9idGVyIHN0YXR1cyBkbyBlc3RvcXVlOicsIGVycm9yKVxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhIHNlIGjDoSBlc3RvcXVlIHN1ZmljaWVudGUgcGFyYSB1bWEgbG9jYcOnw6NvXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIHZhbGlkYXRlSW52ZW50b3J5QXZhaWxhYmlsaXR5KFxyXG4gICAgcHJvZHVjdHM6IEFycmF5PHsgcHJvZHVjdElkOiBzdHJpbmc7IG1ldGVyczogbnVtYmVyIH0+LFxyXG4gICAgYWNjZXNzb3JpZXM6IEFycmF5PHsgYWNjZXNzb3J5SWQ6IHN0cmluZzsgcXR5OiBudW1iZXIgfT4sXHJcbiAgICBlcXVpcG1lbnQ6IEFycmF5PHsgZXF1aXBtZW50SWQ6IHN0cmluZzsgcXR5OiBudW1iZXIgfT5cclxuICApOiBQcm9taXNlPHtcclxuICAgIGF2YWlsYWJsZTogYm9vbGVhblxyXG4gICAgY29uZmxpY3RzOiBBcnJheTx7XHJcbiAgICAgIGlkOiBzdHJpbmdcclxuICAgICAgdHlwZTogc3RyaW5nXHJcbiAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICByZXF1ZXN0ZWQ6IG51bWJlclxyXG4gICAgICBhdmFpbGFibGU6IG51bWJlclxyXG4gICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICAgIHVuaXQ6IHN0cmluZ1xyXG4gICAgfT5cclxuICB9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb25mbGljdHM6IGFueVtdID0gW11cclxuICAgICAgY29uc29sZS5sb2coJ/CflI0gVmFsaWRhbmRvIGRpc3BvbmliaWxpZGFkZSBkZSBlc3RvcXVlLi4uJylcclxuXHJcbiAgICAgIC8vIFZhbGlkYXIgcHJvZHV0b3MgKG1ldHJvcylcclxuICAgICAgZm9yIChjb25zdCBwcm9kdWN0IG9mIHByb2R1Y3RzKSB7XHJcbiAgICAgICAgaWYgKHByb2R1Y3QubWV0ZXJzID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgcHJvZHVjdEluZm8gPSBhd2FpdCBwcmlzbWEucHJvZHVjdC5maW5kVW5pcXVlKHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHByb2R1Y3QucHJvZHVjdElkIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgaWYgKHByb2R1Y3RJbmZvKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZSA9IHByb2R1Y3RJbmZvLnRvdGFsTWV0ZXJzIC0gcHJvZHVjdEluZm8ub2NjdXBpZWRNZXRlcnNcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYCAg8J+TpiAke3Byb2R1Y3RJbmZvLm5hbWV9OiAke2F2YWlsYWJsZX0vJHtwcm9kdWN0SW5mby50b3RhbE1ldGVyc31twrIgZGlzcG9uw612ZWlzLCBzb2xpY2l0YWRvczogJHtwcm9kdWN0Lm1ldGVyc31twrJgKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZSA8IHByb2R1Y3QubWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgY29uZmxpY3RzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IHByb2R1Y3QucHJvZHVjdElkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BST0RVVE8nLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogcHJvZHVjdEluZm8ubmFtZSxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZDogcHJvZHVjdC5tZXRlcnMsXHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGUsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogcHJvZHVjdEluZm8udG90YWxNZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB1bml0OiAnbcKyJ1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgICDinYwgQ29uZmxpdG86ICR7cHJvZHVjdC5tZXRlcnMgLSBhdmFpbGFibGV9bcKyIGluc3VmaWNpZW50ZXNgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBWYWxpZGFyIGFjZXNzw7NyaW9zICh1bmlkYWRlcylcclxuICAgICAgZm9yIChjb25zdCBhY2Nlc3Nvcnkgb2YgYWNjZXNzb3JpZXMpIHtcclxuICAgICAgICBpZiAoYWNjZXNzb3J5LnF0eSA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGFjY2Vzc29yeUluZm8gPSBhd2FpdCBwcmlzbWEuYWNjZXNzb3J5LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogYWNjZXNzb3J5LmFjY2Vzc29yeUlkIH1cclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgaWYgKGFjY2Vzc29yeUluZm8pIHtcclxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlID0gYWNjZXNzb3J5SW5mby50b3RhbFF0eSAtIGFjY2Vzc29yeUluZm8ub2NjdXBpZWRRdHlcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYCAg4pqZ77iPICR7YWNjZXNzb3J5SW5mby5uYW1lfTogJHthdmFpbGFibGV9LyR7YWNjZXNzb3J5SW5mby50b3RhbFF0eX0gdW5pZGFkZXMgZGlzcG9uw612ZWlzLCBzb2xpY2l0YWRhczogJHthY2Nlc3NvcnkucXR5fWApXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlIDwgYWNjZXNzb3J5LnF0eSkge1xyXG4gICAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBhY2Nlc3NvcnkuYWNjZXNzb3J5SWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnQUNFU1PDk1JJTycsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBhY2Nlc3NvcnlJbmZvLm5hbWUsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWQ6IGFjY2Vzc29yeS5xdHksXHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGUsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogYWNjZXNzb3J5SW5mby50b3RhbFF0eSxcclxuICAgICAgICAgICAgICAgIHVuaXQ6ICd1bidcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAg4p2MIENvbmZsaXRvOiAke2FjY2Vzc29yeS5xdHkgLSBhdmFpbGFibGV9IHVuaWRhZGVzIGluc3VmaWNpZW50ZXNgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBWYWxpZGFyIGVxdWlwYW1lbnRvcyAodW5pZGFkZXMpXHJcbiAgICAgIGZvciAoY29uc3QgZXF1aXAgb2YgZXF1aXBtZW50KSB7XHJcbiAgICAgICAgaWYgKGVxdWlwLnF0eSA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGVxdWlwbWVudEluZm8gPSBhd2FpdCBwcmlzbWEuZXF1aXBtZW50LmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgICB3aGVyZTogeyBpZDogZXF1aXAuZXF1aXBtZW50SWQgfVxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICBpZiAoZXF1aXBtZW50SW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGUgPSBlcXVpcG1lbnRJbmZvLnRvdGFsUXR5IC0gZXF1aXBtZW50SW5mby5vY2N1cGllZFF0eVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgICDwn5SnICR7ZXF1aXBtZW50SW5mby5uYW1lfTogJHthdmFpbGFibGV9LyR7ZXF1aXBtZW50SW5mby50b3RhbFF0eX0gdW5pZGFkZXMgZGlzcG9uw612ZWlzLCBzb2xpY2l0YWRhczogJHtlcXVpcC5xdHl9YClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChhdmFpbGFibGUgPCBlcXVpcC5xdHkpIHtcclxuICAgICAgICAgICAgICBjb25mbGljdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogZXF1aXAuZXF1aXBtZW50SWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnRVFVSVBBTUVOVE8nLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogZXF1aXBtZW50SW5mby5uYW1lLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkOiBlcXVpcC5xdHksXHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGUsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogZXF1aXBtZW50SW5mby50b3RhbFF0eSxcclxuICAgICAgICAgICAgICAgIHVuaXQ6ICd1bidcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAg4p2MIENvbmZsaXRvOiAke2VxdWlwLnF0eSAtIGF2YWlsYWJsZX0gdW5pZGFkZXMgaW5zdWZpY2llbnRlc2ApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICBhdmFpbGFibGU6IGNvbmZsaWN0cy5sZW5ndGggPT09IDAsXHJcbiAgICAgICAgY29uZmxpY3RzXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgVmFsaWRhw6fDo28gY29uY2x1w61kYTogJHtjb25mbGljdHMubGVuZ3RoID09PSAwID8gJ0VzdG9xdWUgc3VmaWNpZW50ZScgOiBgJHtjb25mbGljdHMubGVuZ3RofSBjb25mbGl0b3MgZW5jb250cmFkb3NgfWApXHJcbiAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIGFvIHZhbGlkYXIgZGlzcG9uaWJpbGlkYWRlIGRvIGVzdG9xdWU6JywgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnTDqW0gbyBzdGF0dXMgZGV0YWxoYWRvIGRvIGVzdG9xdWUgcGFyYSB1bSBwZXLDrW9kbyBlc3BlY8OtZmljb1xyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBnZXREZXRhaWxlZEludmVudG9yeVN0YXR1cyhcclxuICAgIHN0YXJ0RGF0ZT86IERhdGUsXHJcbiAgICBlbmREYXRlPzogRGF0ZVxyXG4gICk6IFByb21pc2U8e1xyXG4gICAgcGVyaW9kOiB7IHN0YXJ0RGF0ZT86IHN0cmluZzsgZW5kRGF0ZT86IHN0cmluZyB9XHJcbiAgICBwcm9kdWN0czogQXJyYXk8e1xyXG4gICAgICBpZDogc3RyaW5nXHJcbiAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICB0b3RhbE1ldGVyczogbnVtYmVyXHJcbiAgICAgIG9jY3VwaWVkTWV0ZXJzOiBudW1iZXJcclxuICAgICAgYXZhaWxhYmxlTWV0ZXJzOiBudW1iZXJcclxuICAgICAgdXRpbGl6YXRpb246IG51bWJlclxyXG4gICAgICBhY3RpdmVCb29raW5nczogbnVtYmVyXHJcbiAgICB9PlxyXG4gICAgYWNjZXNzb3JpZXM6IEFycmF5PHtcclxuICAgICAgaWQ6IHN0cmluZ1xyXG4gICAgICBuYW1lOiBzdHJpbmdcclxuICAgICAgdG90YWxRdHk6IG51bWJlclxyXG4gICAgICBvY2N1cGllZFF0eTogbnVtYmVyXHJcbiAgICAgIGF2YWlsYWJsZVF0eTogbnVtYmVyXHJcbiAgICAgIHV0aWxpemF0aW9uOiBudW1iZXJcclxuICAgICAgYWN0aXZlQm9va2luZ3M6IG51bWJlclxyXG4gICAgfT5cclxuICAgIGVxdWlwbWVudDogQXJyYXk8e1xyXG4gICAgICBpZDogc3RyaW5nXHJcbiAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICB0b3RhbFF0eTogbnVtYmVyXHJcbiAgICAgIG9jY3VwaWVkUXR5OiBudW1iZXJcclxuICAgICAgYXZhaWxhYmxlUXR5OiBudW1iZXJcclxuICAgICAgdXRpbGl6YXRpb246IG51bWJlclxyXG4gICAgICBhY3RpdmVCb29raW5nczogbnVtYmVyXHJcbiAgICB9PlxyXG4gICAgc3VtbWFyeToge1xyXG4gICAgICB0b3RhbEl0ZW1zOiBudW1iZXJcclxuICAgICAgdG90YWxPY2N1cGllZDogbnVtYmVyXHJcbiAgICAgIHRvdGFsQXZhaWxhYmxlOiBudW1iZXJcclxuICAgICAgb3ZlcmFsbFV0aWxpemF0aW9uOiBudW1iZXJcclxuICAgIH1cclxuICB9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwcm9kdWN0cyA9IGF3YWl0IHByaXNtYS5wcm9kdWN0LmZpbmRNYW55KClcclxuICAgICAgY29uc3QgYWNjZXNzb3JpZXMgPSBhd2FpdCBwcmlzbWEuYWNjZXNzb3J5LmZpbmRNYW55KClcclxuICAgICAgY29uc3QgZXF1aXBtZW50ID0gYXdhaXQgcHJpc21hLmVxdWlwbWVudC5maW5kTWFueSgpXHJcblxyXG4gICAgICBjb25zdCBwcm9kdWN0U3RhdHVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgcHJvZHVjdHMubWFwKGFzeW5jIChwKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBhY3RpdmVCb29raW5ncyA9IHN0YXJ0RGF0ZSAmJiBlbmREYXRlIFxyXG4gICAgICAgICAgICA/IGF3YWl0IHRoaXMuY291bnRQcm9kdWN0Qm9va2luZ3NJblBlcmlvZChwLmlkLCBzdGFydERhdGUsIGVuZERhdGUpXHJcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy5jb3VudEFjdGl2ZVByb2R1Y3RCb29raW5ncyhwLmlkKVxyXG5cclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiBwLmlkLFxyXG4gICAgICAgICAgICBuYW1lOiBwLm5hbWUsXHJcbiAgICAgICAgICAgIHRvdGFsTWV0ZXJzOiBwLnRvdGFsTWV0ZXJzLFxyXG4gICAgICAgICAgICBvY2N1cGllZE1ldGVyczogcC5vY2N1cGllZE1ldGVycyB8fCAwLFxyXG4gICAgICAgICAgICBhdmFpbGFibGVNZXRlcnM6IHAudG90YWxNZXRlcnMgLSAocC5vY2N1cGllZE1ldGVycyB8fCAwKSxcclxuICAgICAgICAgICAgdXRpbGl6YXRpb246IHAudG90YWxNZXRlcnMgPiAwID8gKChwLm9jY3VwaWVkTWV0ZXJzIHx8IDApIC8gcC50b3RhbE1ldGVycyAqIDEwMCkgOiAwLFxyXG4gICAgICAgICAgICBhY3RpdmVCb29raW5nc1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuXHJcbiAgICAgIGNvbnN0IGFjY2Vzc29yeVN0YXR1cyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICAgIGFjY2Vzc29yaWVzLm1hcChhc3luYyAoYSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgYWN0aXZlQm9va2luZ3MgPSBzdGFydERhdGUgJiYgZW5kRGF0ZSBcclxuICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmNvdW50QWNjZXNzb3J5Qm9va2luZ3NJblBlcmlvZChhLmlkLCBzdGFydERhdGUsIGVuZERhdGUpXHJcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy5jb3VudEFjdGl2ZUFjY2Vzc29yeUJvb2tpbmdzKGEuaWQpXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGEuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGEubmFtZSxcclxuICAgICAgICAgICAgdG90YWxRdHk6IGEudG90YWxRdHksXHJcbiAgICAgICAgICAgIG9jY3VwaWVkUXR5OiBhLm9jY3VwaWVkUXR5IHx8IDAsXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVF0eTogYS50b3RhbFF0eSAtIChhLm9jY3VwaWVkUXR5IHx8IDApLFxyXG4gICAgICAgICAgICB1dGlsaXphdGlvbjogYS50b3RhbFF0eSA+IDAgPyAoKGEub2NjdXBpZWRRdHkgfHwgMCkgLyBhLnRvdGFsUXR5ICogMTAwKSA6IDAsXHJcbiAgICAgICAgICAgIGFjdGl2ZUJvb2tpbmdzXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG5cclxuICAgICAgY29uc3QgZXF1aXBtZW50U3RhdHVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgZXF1aXBtZW50Lm1hcChhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgYWN0aXZlQm9va2luZ3MgPSBzdGFydERhdGUgJiYgZW5kRGF0ZSBcclxuICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmNvdW50RXF1aXBtZW50Qm9va2luZ3NJblBlcmlvZChlLmlkLCBzdGFydERhdGUsIGVuZERhdGUpXHJcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy5jb3VudEFjdGl2ZUVxdWlwbWVudEJvb2tpbmdzKGUuaWQpXHJcblxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGUuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGUubmFtZSxcclxuICAgICAgICAgICAgdG90YWxRdHk6IGUudG90YWxRdHksXHJcbiAgICAgICAgICAgIG9jY3VwaWVkUXR5OiBlLm9jY3VwaWVkUXR5IHx8IDAsXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVF0eTogZS50b3RhbFF0eSAtIChlLm9jY3VwaWVkUXR5IHx8IDApLFxyXG4gICAgICAgICAgICB1dGlsaXphdGlvbjogZS50b3RhbFF0eSA+IDAgPyAoKGUub2NjdXBpZWRRdHkgfHwgMCkgLyBlLnRvdGFsUXR5ICogMTAwKSA6IDAsXHJcbiAgICAgICAgICAgIGFjdGl2ZUJvb2tpbmdzXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG5cclxuICAgICAgLy8gQ2FsY3VsYXIgcmVzdW1vIGdlcmFsXHJcbiAgICAgIGNvbnN0IHRvdGFsSXRlbXMgPSBwcm9kdWN0cy5sZW5ndGggKyBhY2Nlc3Nvcmllcy5sZW5ndGggKyBlcXVpcG1lbnQubGVuZ3RoXHJcbiAgICAgIGNvbnN0IHRvdGFsT2NjdXBpZWQgPSBwcm9kdWN0U3RhdHVzLnJlZHVjZSgoc3VtLCBwKSA9PiBzdW0gKyBwLm9jY3VwaWVkTWV0ZXJzLCAwKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yeVN0YXR1cy5yZWR1Y2UoKHN1bSwgYSkgPT4gc3VtICsgYS5vY2N1cGllZFF0eSwgMCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnRTdGF0dXMucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIGUub2NjdXBpZWRRdHksIDApXHJcbiAgICAgIGNvbnN0IHRvdGFsQXZhaWxhYmxlID0gcHJvZHVjdFN0YXR1cy5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcC5hdmFpbGFibGVNZXRlcnMsIDApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yeVN0YXR1cy5yZWR1Y2UoKHN1bSwgYSkgPT4gc3VtICsgYS5hdmFpbGFibGVRdHksIDApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVxdWlwbWVudFN0YXR1cy5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgZS5hdmFpbGFibGVRdHksIDApXHJcbiAgICAgIGNvbnN0IHRvdGFsQ2FwYWNpdHkgPSBwcm9kdWN0U3RhdHVzLnJlZHVjZSgoc3VtLCBwKSA9PiBzdW0gKyBwLnRvdGFsTWV0ZXJzLCAwKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yeVN0YXR1cy5yZWR1Y2UoKHN1bSwgYSkgPT4gc3VtICsgYS50b3RhbFF0eSwgMCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnRTdGF0dXMucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIGUudG90YWxRdHksIDApXHJcbiAgICAgIGNvbnN0IG92ZXJhbGxVdGlsaXphdGlvbiA9IHRvdGFsQ2FwYWNpdHkgPiAwID8gKHRvdGFsT2NjdXBpZWQgLyB0b3RhbENhcGFjaXR5ICogMTAwKSA6IDBcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcGVyaW9kOiB7XHJcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZT8udG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGU/LnRvSVNPU3RyaW5nKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb2R1Y3RzOiBwcm9kdWN0U3RhdHVzLFxyXG4gICAgICAgIGFjY2Vzc29yaWVzOiBhY2Nlc3NvcnlTdGF0dXMsXHJcbiAgICAgICAgZXF1aXBtZW50OiBlcXVpcG1lbnRTdGF0dXMsXHJcbiAgICAgICAgc3VtbWFyeToge1xyXG4gICAgICAgICAgdG90YWxJdGVtcyxcclxuICAgICAgICAgIHRvdGFsT2NjdXBpZWQsXHJcbiAgICAgICAgICB0b3RhbEF2YWlsYWJsZSxcclxuICAgICAgICAgIG92ZXJhbGxVdGlsaXphdGlvbjogTWF0aC5yb3VuZChvdmVyYWxsVXRpbGl6YXRpb24gKiAxMDApIC8gMTAwXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJybyBhbyBvYnRlciBzdGF0dXMgZGV0YWxoYWRvIGRvIGVzdG9xdWU6JywgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBGdW7Dp8O1ZXMgYXV4aWxpYXJlcyBwYXJhIGNvbnRhciBsb2Nhw6fDtWVzXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY291bnRQcm9kdWN0Qm9va2luZ3NJblBlcmlvZChwcm9kdWN0SWQ6IHN0cmluZywgc3RhcnREYXRlOiBEYXRlLCBlbmREYXRlOiBEYXRlKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGJvb2tpbmdzID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIEFORDogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBPUjogW1xyXG4gICAgICAgICAgICAgIHsgc3RhcnREYXRlOiB7IGx0ZTogZW5kRGF0ZSB9LCBlbmREYXRlOiB7IGd0ZTogc3RhcnREYXRlIH0gfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IHsgaW46IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXSB9IH0sXHJcbiAgICAgICAgICB7IGl0ZW1zOiB7IHNvbWU6IHsgcHJvZHVjdElkIH0gfSB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGJvb2tpbmdzLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY291bnRBY2Nlc3NvcnlCb29raW5nc0luUGVyaW9kKGFjY2Vzc29yeUlkOiBzdHJpbmcsIHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICBjb25zdCBib29raW5ncyA9IGF3YWl0IHByaXNtYS5ib29raW5nLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBBTkQ6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgT1I6IFtcclxuICAgICAgICAgICAgICB7IHN0YXJ0RGF0ZTogeyBsdGU6IGVuZERhdGUgfSwgZW5kRGF0ZTogeyBndGU6IHN0YXJ0RGF0ZSB9IH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiB7IGluOiBbJ0NPTkZJUk1FRCcsICdQRU5ESU5HJywgJ0lOX1BST0dSRVNTJ10gfSB9LFxyXG4gICAgICAgICAgeyBhY2Nlc3NvcmllczogeyBzb21lOiB7IGFjY2Vzc29yeUlkIH0gfSB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGJvb2tpbmdzLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY291bnRFcXVpcG1lbnRCb29raW5nc0luUGVyaW9kKGVxdWlwbWVudElkOiBzdHJpbmcsIHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICBjb25zdCBib29raW5ncyA9IGF3YWl0IHByaXNtYS5ib29raW5nLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBBTkQ6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgT1I6IFtcclxuICAgICAgICAgICAgICB7IHN0YXJ0RGF0ZTogeyBsdGU6IGVuZERhdGUgfSwgZW5kRGF0ZTogeyBndGU6IHN0YXJ0RGF0ZSB9IH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiB7IGluOiBbJ0NPTkZJUk1FRCcsICdQRU5ESU5HJywgJ0lOX1BST0dSRVNTJ10gfSB9LFxyXG4gICAgICAgICAgeyBlcXVpcG1lbnQ6IHsgc29tZTogeyBlcXVpcG1lbnRJZCB9IH0gfVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBib29raW5ncy5sZW5ndGhcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGNvdW50QWN0aXZlUHJvZHVjdEJvb2tpbmdzKHByb2R1Y3RJZDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGJvb2tpbmdzID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuY291bnQoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIEFORDogW1xyXG4gICAgICAgICAgeyBzdGF0dXM6IHsgaW46IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXSB9IH0sXHJcbiAgICAgICAgICB7IGl0ZW1zOiB7IHNvbWU6IHsgcHJvZHVjdElkIH0gfSB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGJvb2tpbmdzXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBjb3VudEFjdGl2ZUFjY2Vzc29yeUJvb2tpbmdzKGFjY2Vzc29yeUlkOiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgY29uc3QgYm9va2luZ3MgPSBhd2FpdCBwcmlzbWEuYm9va2luZy5jb3VudCh7XHJcbiAgICAgIHdoZXJlOiB7XHJcbiAgICAgICAgQU5EOiBbXHJcbiAgICAgICAgICB7IHN0YXR1czogeyBpbjogWydDT05GSVJNRUQnLCAnUEVORElORycsICdJTl9QUk9HUkVTUyddIH0gfSxcclxuICAgICAgICAgIHsgYWNjZXNzb3JpZXM6IHsgc29tZTogeyBhY2Nlc3NvcnlJZCB9IH0gfVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBib29raW5nc1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY291bnRBY3RpdmVFcXVpcG1lbnRCb29raW5ncyhlcXVpcG1lbnRJZDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGJvb2tpbmdzID0gYXdhaXQgcHJpc21hLmJvb2tpbmcuY291bnQoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIEFORDogW1xyXG4gICAgICAgICAgeyBzdGF0dXM6IHsgaW46IFsnQ09ORklSTUVEJywgJ1BFTkRJTkcnLCAnSU5fUFJPR1JFU1MnXSB9IH0sXHJcbiAgICAgICAgICB7IGVxdWlwbWVudDogeyBzb21lOiB7IGVxdWlwbWVudElkIH0gfSB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGJvb2tpbmdzXHJcbiAgfVxyXG59XHJcblxyXG4vLyBGdW7Dp8OjbyBwYXJhIGV4ZWN1dGFyIHZlcmlmaWNhw6fDo28gcGVyacOzZGljYSBkZSBsb2Nhw6fDtWVzIGV4cGlyYWRhc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuSW52ZW50b3J5TWFpbnRlbmFuY2UoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCfwn5qAIEluaWNpYW5kbyBtYW51dGVuw6fDo28gY29tcGxldGEgZG8gZXN0b3F1ZS4uLicpXHJcbiAgICBcclxuICAgIC8vIDEuIENvcnJpZ2lyIHN0YXR1cyBkbyBlc3RvcXVlXHJcbiAgICBjb25zdCBmaXhlZENvdW50ID0gYXdhaXQgSW52ZW50b3J5U2VydmljZS5maXhJbnZlbnRvcnlTdGF0dXMoKVxyXG4gICAgY29uc29sZS5sb2coYOKchSBTdGF0dXMgY29ycmlnaWRvOiAke2ZpeGVkQ291bnR9IGxvY2HDp8O1ZXNgKVxyXG4gICAgXHJcbiAgICAvLyAyLiBWZXJpZmljYXIgbG9jYcOnw7VlcyBleHBpcmFkYXNcclxuICAgIGNvbnN0IGV4cGlyZWRDb3VudCA9IGF3YWl0IEludmVudG9yeVNlcnZpY2UuY2hlY2tFeHBpcmVkQm9va2luZ3MoKVxyXG4gICAgY29uc29sZS5sb2coYOKchSBFeHBpcmHDp8O1ZXMgcHJvY2Vzc2FkYXM6ICR7ZXhwaXJlZENvdW50fSBsb2Nhw6fDtWVzYClcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYPCfjokgTWFudXRlbsOnw6NvIGRlIGVzdG9xdWUgY29uY2x1w61kYS4gVG90YWw6ICR7Zml4ZWRDb3VudCArIGV4cGlyZWRDb3VudH0gb3BlcmHDp8O1ZXNgKVxyXG4gICAgcmV0dXJuIHsgZml4ZWQ6IGZpeGVkQ291bnQsIGV4cGlyZWQ6IGV4cGlyZWRDb3VudCB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIG5hIG1hbnV0ZW7Dp8OjbyBkZSBlc3RvcXVlOicsIGVycm9yKVxyXG4gICAgdGhyb3cgZXJyb3JcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbInByaXNtYSIsIkludmVudG9yeVNlcnZpY2UiLCJ1cGRhdGVJbnZlbnRvcnlPbkJvb2tpbmdDcmVhdGUiLCJib29raW5nSWQiLCJib29raW5nIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaWQiLCJpbmNsdWRlIiwiaXRlbXMiLCJhY2Nlc3NvcmllcyIsImVxdWlwbWVudCIsIkVycm9yIiwiYWN0aXZlU3RhdHVzZXMiLCJpbmNsdWRlcyIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJwcm9kdXRvcyIsImxlbmd0aCIsImFjZXNzb3Jpb3MiLCJlcXVpcGFtZW50b3MiLCJpdGVtIiwibWV0ZXJzIiwicHJvZHVjdCIsInVwZGF0ZSIsInByb2R1Y3RJZCIsImRhdGEiLCJvY2N1cGllZE1ldGVycyIsImluY3JlbWVudCIsImFjY2Vzc29yeSIsInF0eSIsImFjY2Vzc29yeUlkIiwib2NjdXBpZWRRdHkiLCJlcXVpcG1lbnRJZCIsImVycm9yIiwicmVzdG9yZUludmVudG9yeU9uQm9va2luZ0RlbGV0ZSIsImRlY3JlbWVudCIsInVwZGF0ZUludmVudG9yeU9uQm9va2luZ01vZGlmeSIsIm9sZEl0ZW1zIiwibmV3SXRlbXMiLCJjaGVja0V4cGlyZWRCb29raW5ncyIsIm5vdyIsIkRhdGUiLCJleHBpcmVkQm9va2luZ3MiLCJmaW5kTWFueSIsImVuZERhdGUiLCJsdCIsImluIiwiZml4SW52ZW50b3J5U3RhdHVzIiwiYWxsQm9va2luZ3MiLCJmaXhlZENvdW50Iiwic2hvdWxkT2NjdXB5U3RvY2siLCJuZWVkc0ZpeCIsImN1cnJlbnRPY2N1cGllZCIsImV4cGVjdGVkT2NjdXBpZWQiLCJuYW1lIiwiYWNjIiwiZXF1aXAiLCJlcSIsImV2ZW50VGl0bGUiLCJ2YWxpZGF0ZUF2YWlsYWJpbGl0eUZvclBlcmlvZCIsInN0YXJ0RGF0ZSIsInByb2R1Y3RzIiwiZXhjbHVkZUJvb2tpbmdJZCIsInRvSVNPU3RyaW5nIiwiY29uZmxpY3RzIiwidG90YWxCb29raW5ncyIsInRvdGFsQ29uZmxpY3RzIiwicHJvZHVjdEluZm8iLCJjb25mbGljdCIsImNoZWNrUHJvZHVjdEF2YWlsYWJpbGl0eSIsInB1c2giLCJhY2Nlc3NvcnlJbmZvIiwiY2hlY2tBY2Nlc3NvcnlBdmFpbGFiaWxpdHkiLCJlcXVpcG1lbnRJbmZvIiwiY2hlY2tFcXVpcG1lbnRBdmFpbGFiaWxpdHkiLCJjb3VudEJvb2tpbmdzSW5QZXJpb2QiLCJyZXN1bHQiLCJhdmFpbGFibGUiLCJwZXJpb2RBdmFpbGFiaWxpdHkiLCJyZXF1ZXN0ZWRNZXRlcnMiLCJvdmVybGFwcGluZ0Jvb2tpbmdzIiwiQU5EIiwiT1IiLCJsdGUiLCJndGUiLCJub3QiLCJjb25mbGljdGluZ0Jvb2tpbmdzIiwicXVhbnRpdHkiLCJhdmFpbGFibGVNZXRlcnMiLCJ0b3RhbE1ldGVycyIsInR5cGUiLCJyZXF1ZXN0ZWQiLCJ0b3RhbCIsInVuaXQiLCJyZXF1ZXN0ZWRRdHkiLCJhdmFpbGFibGVRdHkiLCJ0b3RhbFF0eSIsImNvdW50IiwiZ2V0SW52ZW50b3J5U3RhdHVzIiwic2VsZWN0IiwibWFwIiwicCIsInRvdGFsUXVhbnRpdHkiLCJvY2N1cGllZFF1YW50aXR5IiwiYXZhaWxhYmxlUXVhbnRpdHkiLCJhIiwiZSIsInZhbGlkYXRlSW52ZW50b3J5QXZhaWxhYmlsaXR5IiwiZ2V0RGV0YWlsZWRJbnZlbnRvcnlTdGF0dXMiLCJwcm9kdWN0U3RhdHVzIiwiUHJvbWlzZSIsImFsbCIsImFjdGl2ZUJvb2tpbmdzIiwiY291bnRQcm9kdWN0Qm9va2luZ3NJblBlcmlvZCIsImNvdW50QWN0aXZlUHJvZHVjdEJvb2tpbmdzIiwidXRpbGl6YXRpb24iLCJhY2Nlc3NvcnlTdGF0dXMiLCJjb3VudEFjY2Vzc29yeUJvb2tpbmdzSW5QZXJpb2QiLCJjb3VudEFjdGl2ZUFjY2Vzc29yeUJvb2tpbmdzIiwiZXF1aXBtZW50U3RhdHVzIiwiY291bnRFcXVpcG1lbnRCb29raW5nc0luUGVyaW9kIiwiY291bnRBY3RpdmVFcXVpcG1lbnRCb29raW5ncyIsInRvdGFsSXRlbXMiLCJ0b3RhbE9jY3VwaWVkIiwicmVkdWNlIiwic3VtIiwidG90YWxBdmFpbGFibGUiLCJ0b3RhbENhcGFjaXR5Iiwib3ZlcmFsbFV0aWxpemF0aW9uIiwicGVyaW9kIiwic3VtbWFyeSIsIk1hdGgiLCJyb3VuZCIsImJvb2tpbmdzIiwic29tZSIsInJ1bkludmVudG9yeU1haW50ZW5hbmNlIiwiZXhwaXJlZENvdW50IiwiZml4ZWQiLCJleHBpcmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/inventory.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&page=%2Fapi%2Fbookings%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbookings%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmarco%5CDownloads%5Cled-rental-app-min%5Cled-rental-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();